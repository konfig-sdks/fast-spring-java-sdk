/*
 * FastSpring API
 * The FastSpring API and its supported requests, data, endpoints, and rate limits.  The FastSpring API is a backend service you can use to communicate with your FastSpring Store programmatically. It requires basic understanding of HTTP communication methods. The primary API communication methods include: - **GET** - request data from your store - **POST** - send data to your store, such as creating a new product record - **DELETE** - remove data from your store  The structure of the JSON data sent and received using the API is very similar to Webhooks. However, using the FastSpring API, you initiate all communication with your FastSpring Store.  If you prefer a client-side method of communicating with your FastSpring Store and generating dynamic webpage content, check out the [Store Builder Library](https://fastspring.com/docs/get-started-with-store-builder-library/).  ## Access the API  #### API Credentials and Authentication  FastSpring API credentials consist of a single username and password for your entire Store. The username and password are used for [Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) when making requests to the API.  #### Obtain Your API Credentials  1. Log on to the FastSpring App and navigate to [Integrations](https://fastspring.com/docs/integrations) > **API Credentials**. Initially, the only option on this page is the **Create** command.  2. Click **Create** to generate your API **Username** and **Password**. The page automatically refreshes, and then your credentials are displayed.  3. Make a note of the credentials and store them securely.  The API credentials allow complete access and control over your FastSpring Store. You will not be able to view the password in the FastSpring App after this session. If you forget your API credentials, you can reset them, however any of your stored procedures that rely on API access must be updated immediately with the new credentials. Otherwise, the API requests will fail.  ## API Requests  **Make all requests to https://api.fastspring.com**  When you make your requests, consider the following: - Ensure that the HTTP methods for all calls use uppercase letters (“GET,” “POST,” “DELETE”) Lowercase letters may result in a 404 error response. - FastSpring requires TLS 1.2 (or later) encryption for all calls to the FastSpring API.  - The API requires a **User-Agent** header in all requests. If your request does not include it, you may receive an 401 error message when attempting to make API requests. - The API uses basic authentication and does not support URL-encoded authentication. Use **Base64** to encode your username and password in the header. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OrdersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrdersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByDateRangeCall(String beginDate, String endDate, Double limit, Double page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders?begin={begin_date}&end={end_date}&limit={limit}&page={page}"
            .replace("{" + "begin_date" + "}", localVarApiClient.escapeString(beginDate.toString()))
            .replace("{" + "end_date" + "}", localVarApiClient.escapeString(endDate.toString()))
            .replace("{" + "limit" + "}", localVarApiClient.escapeString(limit.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByDateRangeValidateBeforeCall(String beginDate, String endDate, Double limit, Double page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'beginDate' is set
        if (beginDate == null) {
            throw new ApiException("Missing the required parameter 'beginDate' when calling getByDateRange(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getByDateRange(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling getByDateRange(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getByDateRange(Async)");
        }

        return getByDateRangeCall(beginDate, endDate, limit, page, _callback);

    }


    private ApiResponse<Object> getByDateRangeWithHttpInfo(String beginDate, String endDate, Double limit, Double page) throws ApiException {
        okhttp3.Call localVarCall = getByDateRangeValidateBeforeCall(beginDate, endDate, limit, page, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByDateRangeAsync(String beginDate, String endDate, Double limit, Double page, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByDateRangeValidateBeforeCall(beginDate, endDate, limit, page, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByDateRangeRequestBuilder {
        private final String beginDate;
        private final String endDate;
        private final Double limit;
        private final Double page;

        private GetByDateRangeRequestBuilder(String beginDate, String endDate, double limit, double page) {
            this.beginDate = beginDate;
            this.endDate = endDate;
            this.limit = limit;
            this.page = page;
        }

        /**
         * Build call for getByDateRange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByDateRangeCall(beginDate, endDate, limit, page, _callback);
        }


        /**
         * Execute getByDateRange request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getByDateRangeWithHttpInfo(beginDate, endDate, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByDateRange request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getByDateRangeWithHttpInfo(beginDate, endDate, limit, page);
        }

        /**
         * Execute getByDateRange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getByDateRangeAsync(beginDate, endDate, limit, page, _callback);
        }
    }

    /**
     * Get orders by date range
     * 
     * @param beginDate filters results to include transactions after the specified begin date (must be at least one day before the specified end date), the format must be MM/DD/YY (required)
     * @param endDate filters results to include transactions before the specified end date, the format must be MM/DD/YY (required)
     * @param limit integer limits the number of order records returned per page (default is 50 records) (required)
     * @param page specifies page number of results to be returned; used together with limit to control pagination (required)
     * @return GetByDateRangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetByDateRangeRequestBuilder getByDateRange(String beginDate, String endDate, double limit, double page) throws IllegalArgumentException {
        if (beginDate == null) throw new IllegalArgumentException("\"beginDate\" is required but got null");
            

        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
            

        
        
        return new GetByDateRangeRequestBuilder(beginDate, endDate, limit, page);
    }
    private okhttp3.Call getByEndDateCall(String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders?end={end_date}"
            .replace("{" + "end_date" + "}", localVarApiClient.escapeString(endDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEndDateValidateBeforeCall(String endDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getByEndDate(Async)");
        }

        return getByEndDateCall(endDate, _callback);

    }


    private ApiResponse<Object> getByEndDateWithHttpInfo(String endDate) throws ApiException {
        okhttp3.Call localVarCall = getByEndDateValidateBeforeCall(endDate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEndDateAsync(String endDate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEndDateValidateBeforeCall(endDate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEndDateRequestBuilder {
        private final String endDate;

        private GetByEndDateRequestBuilder(String endDate) {
            this.endDate = endDate;
        }

        /**
         * Build call for getByEndDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEndDateCall(endDate, _callback);
        }


        /**
         * Execute getByEndDate request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getByEndDateWithHttpInfo(endDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEndDate request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getByEndDateWithHttpInfo(endDate);
        }

        /**
         * Execute getByEndDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getByEndDateAsync(endDate, _callback);
        }
    }

    /**
     * Get orders by end date
     * 
     * @param endDate filters results to include transactions before the specified end date, the format must be MM/DD/YY (required)
     * @return GetByEndDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetByEndDateRequestBuilder getByEndDate(String endDate) throws IllegalArgumentException {
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
            

        return new GetByEndDateRequestBuilder(endDate);
    }
    private okhttp3.Call getByIdCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders/{order_id}"
            .replace("{" + "order_id" + "}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getById(Async)");
        }

        return getByIdCall(orderId, _callback);

    }


    private ApiResponse<Object> getByIdWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String orderId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String orderId;

        private GetByIdRequestBuilder(String orderId) {
            this.orderId = orderId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(orderId, _callback);
        }


        /**
         * Execute getById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getByIdWithHttpInfo(orderId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(orderId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getByIdAsync(orderId, _callback);
        }
    }

    /**
     * Get orders by ID
     * 
     * @param orderId Order Id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String orderId) throws IllegalArgumentException {
        if (orderId == null) throw new IllegalArgumentException("\"orderId\" is required but got null");
            

        return new GetByIdRequestBuilder(orderId);
    }
    private okhttp3.Call getByProductPathCall(String productPath, Double limit, Double page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders?products={product_path}&limit={limit}&page={page}"
            .replace("{" + "product_path" + "}", localVarApiClient.escapeString(productPath.toString()))
            .replace("{" + "limit" + "}", localVarApiClient.escapeString(limit.toString()))
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByProductPathValidateBeforeCall(String productPath, Double limit, Double page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productPath' is set
        if (productPath == null) {
            throw new ApiException("Missing the required parameter 'productPath' when calling getByProductPath(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling getByProductPath(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getByProductPath(Async)");
        }

        return getByProductPathCall(productPath, limit, page, _callback);

    }


    private ApiResponse<Object> getByProductPathWithHttpInfo(String productPath, Double limit, Double page) throws ApiException {
        okhttp3.Call localVarCall = getByProductPathValidateBeforeCall(productPath, limit, page, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByProductPathAsync(String productPath, Double limit, Double page, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByProductPathValidateBeforeCall(productPath, limit, page, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByProductPathRequestBuilder {
        private final String productPath;
        private final Double limit;
        private final Double page;

        private GetByProductPathRequestBuilder(String productPath, double limit, double page) {
            this.productPath = productPath;
            this.limit = limit;
            this.page = page;
        }

        /**
         * Build call for getByProductPath
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByProductPathCall(productPath, limit, page, _callback);
        }


        /**
         * Execute getByProductPath request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getByProductPathWithHttpInfo(productPath, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByProductPath request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getByProductPathWithHttpInfo(productPath, limit, page);
        }

        /**
         * Execute getByProductPath request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getByProductPathAsync(productPath, limit, page, _callback);
        }
    }

    /**
     * Get orders by product path
     * 
     * @param productPath Product path (required)
     * @param limit integer limits the number of order records returned per page (default is 50 records) (required)
     * @param page specifies page number of results to be returned; used together with limit to control pagination (required)
     * @return GetByProductPathRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetByProductPathRequestBuilder getByProductPath(String productPath, double limit, double page) throws IllegalArgumentException {
        if (productPath == null) throw new IllegalArgumentException("\"productPath\" is required but got null");
            

        
        
        return new GetByProductPathRequestBuilder(productPath, limit, page);
    }
    private okhttp3.Call getByProductPathAndDateRangeCall(String productPath, String beginDate, String endDate, Double limit, Double page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders?products={product_path}&begin={begin_date}&end={end_date}"
            .replace("{" + "product_path" + "}", localVarApiClient.escapeString(productPath.toString()))
            .replace("{" + "begin_date" + "}", localVarApiClient.escapeString(beginDate.toString()))
            .replace("{" + "end_date" + "}", localVarApiClient.escapeString(endDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByProductPathAndDateRangeValidateBeforeCall(String productPath, String beginDate, String endDate, Double limit, Double page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productPath' is set
        if (productPath == null) {
            throw new ApiException("Missing the required parameter 'productPath' when calling getByProductPathAndDateRange(Async)");
        }

        // verify the required parameter 'beginDate' is set
        if (beginDate == null) {
            throw new ApiException("Missing the required parameter 'beginDate' when calling getByProductPathAndDateRange(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getByProductPathAndDateRange(Async)");
        }

        return getByProductPathAndDateRangeCall(productPath, beginDate, endDate, limit, page, _callback);

    }


    private ApiResponse<Object> getByProductPathAndDateRangeWithHttpInfo(String productPath, String beginDate, String endDate, Double limit, Double page) throws ApiException {
        okhttp3.Call localVarCall = getByProductPathAndDateRangeValidateBeforeCall(productPath, beginDate, endDate, limit, page, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByProductPathAndDateRangeAsync(String productPath, String beginDate, String endDate, Double limit, Double page, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByProductPathAndDateRangeValidateBeforeCall(productPath, beginDate, endDate, limit, page, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByProductPathAndDateRangeRequestBuilder {
        private final String productPath;
        private final String beginDate;
        private final String endDate;
        private Double limit;
        private Double page;

        private GetByProductPathAndDateRangeRequestBuilder(String productPath, String beginDate, String endDate) {
            this.productPath = productPath;
            this.beginDate = beginDate;
            this.endDate = endDate;
        }

        /**
         * Set limit
         * @param limit integer limits the number of order records returned per page (default is 50 records) (optional)
         * @return GetByProductPathAndDateRangeRequestBuilder
         */
        public GetByProductPathAndDateRangeRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page specifies page number of results to be returned; used together with limit to control pagination (optional)
         * @return GetByProductPathAndDateRangeRequestBuilder
         */
        public GetByProductPathAndDateRangeRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for getByProductPathAndDateRange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByProductPathAndDateRangeCall(productPath, beginDate, endDate, limit, page, _callback);
        }


        /**
         * Execute getByProductPathAndDateRange request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getByProductPathAndDateRangeWithHttpInfo(productPath, beginDate, endDate, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByProductPathAndDateRange request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getByProductPathAndDateRangeWithHttpInfo(productPath, beginDate, endDate, limit, page);
        }

        /**
         * Execute getByProductPathAndDateRange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getByProductPathAndDateRangeAsync(productPath, beginDate, endDate, limit, page, _callback);
        }
    }

    /**
     * Get orders by product path AND date range
     * 
     * @param productPath Product path (required)
     * @param beginDate filters results to include transactions after the specified begin date (must be at least one day before the specified end date), the format must be yyyy-mm-dd (required)
     * @param endDate filters results to include transactions before the specified end date, the format must be yyyy-mm-dd (required)
     * @return GetByProductPathAndDateRangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetByProductPathAndDateRangeRequestBuilder getByProductPathAndDateRange(String productPath, String beginDate, String endDate) throws IllegalArgumentException {
        if (productPath == null) throw new IllegalArgumentException("\"productPath\" is required but got null");
            

        if (beginDate == null) throw new IllegalArgumentException("\"beginDate\" is required but got null");
            

        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
            

        return new GetByProductPathAndDateRangeRequestBuilder(productPath, beginDate, endDate);
    }
    private okhttp3.Call getOrdersWithReturnsCall(String beginDate, String endDate, Boolean _return, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orders?begin={begin_date}&end={end_date}&returns={return}"
            .replace("{" + "begin_date" + "}", localVarApiClient.escapeString(beginDate.toString()))
            .replace("{" + "end_date" + "}", localVarApiClient.escapeString(endDate.toString()))
            .replace("{" + "return" + "}", localVarApiClient.escapeString(_return.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrdersWithReturnsValidateBeforeCall(String beginDate, String endDate, Boolean _return, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'beginDate' is set
        if (beginDate == null) {
            throw new ApiException("Missing the required parameter 'beginDate' when calling getOrdersWithReturns(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getOrdersWithReturns(Async)");
        }

        // verify the required parameter '_return' is set
        if (_return == null) {
            throw new ApiException("Missing the required parameter '_return' when calling getOrdersWithReturns(Async)");
        }

        return getOrdersWithReturnsCall(beginDate, endDate, _return, _callback);

    }


    private ApiResponse<Object> getOrdersWithReturnsWithHttpInfo(String beginDate, String endDate, Boolean _return) throws ApiException {
        okhttp3.Call localVarCall = getOrdersWithReturnsValidateBeforeCall(beginDate, endDate, _return, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrdersWithReturnsAsync(String beginDate, String endDate, Boolean _return, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrdersWithReturnsValidateBeforeCall(beginDate, endDate, _return, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOrdersWithReturnsRequestBuilder {
        private final String beginDate;
        private final String endDate;
        private final Boolean _return;

        private GetOrdersWithReturnsRequestBuilder(String beginDate, String endDate, Boolean _return) {
            this.beginDate = beginDate;
            this.endDate = endDate;
            this._return = _return;
        }

        /**
         * Build call for getOrdersWithReturns
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrdersWithReturnsCall(beginDate, endDate, _return, _callback);
        }


        /**
         * Execute getOrdersWithReturns request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getOrdersWithReturnsWithHttpInfo(beginDate, endDate, _return);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOrdersWithReturns request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getOrdersWithReturnsWithHttpInfo(beginDate, endDate, _return);
        }

        /**
         * Execute getOrdersWithReturns request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getOrdersWithReturnsAsync(beginDate, endDate, _return, _callback);
        }
    }

    /**
     * Get orders with returns only
     * 
     * @param beginDate filters results to include transactions after the specified begin date (must be at least one day before the specified end date), the format must be MM/DD/YY (required)
     * @param endDate filters results to include transactions before the specified end date, the format must be MM/DD/YY (required)
     * @param _return  (required)
     * @return GetOrdersWithReturnsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetOrdersWithReturnsRequestBuilder getOrdersWithReturns(String beginDate, String endDate, Boolean _return) throws IllegalArgumentException {
        if (beginDate == null) throw new IllegalArgumentException("\"beginDate\" is required but got null");
            

        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
            

        if (_return == null) throw new IllegalArgumentException("\"_return\" is required but got null");
        return new GetOrdersWithReturnsRequestBuilder(beginDate, endDate, _return);
    }
    private okhttp3.Call updateTagsAndAttributesCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTagsAndAttributesValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTagsAndAttributes(Async)");
        }

        return updateTagsAndAttributesCall(body, _callback);

    }


    private ApiResponse<Object> updateTagsAndAttributesWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = updateTagsAndAttributesValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTagsAndAttributesAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTagsAndAttributesValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTagsAndAttributesRequestBuilder {
        private Object body;

        private UpdateTagsAndAttributesRequestBuilder() {
        }

        /**
         * Set body
         * @param body  (optional)
         * @return UpdateTagsAndAttributesRequestBuilder
         */
        public UpdateTagsAndAttributesRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for updateTagsAndAttributes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return updateTagsAndAttributesCall(body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute updateTagsAndAttributes request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<Object> localVarResp = updateTagsAndAttributesWithHttpInfo(body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTagsAndAttributes request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return updateTagsAndAttributesWithHttpInfo(body);
        }

        /**
         * Execute updateTagsAndAttributes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Object body = buildBodyParams();
            return updateTagsAndAttributesAsync(body, _callback);
        }
    }

    /**
     * Update order tags and attributes
     * 
     * @param body  (required)
     * @return UpdateTagsAndAttributesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTagsAndAttributesRequestBuilder updateTagsAndAttributes() throws IllegalArgumentException {
        return new UpdateTagsAndAttributesRequestBuilder();
    }
}
