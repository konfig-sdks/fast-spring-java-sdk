/*
 * FastSpring API
 * The FastSpring API and its supported requests, data, endpoints, and rate limits.  The FastSpring API is a backend service you can use to communicate with your FastSpring Store programmatically. It requires basic understanding of HTTP communication methods. The primary API communication methods include: - **GET** - request data from your store - **POST** - send data to your store, such as creating a new product record - **DELETE** - remove data from your store  The structure of the JSON data sent and received using the API is very similar to Webhooks. However, using the FastSpring API, you initiate all communication with your FastSpring Store.  If you prefer a client-side method of communicating with your FastSpring Store and generating dynamic webpage content, check out the [Store Builder Library](https://fastspring.com/docs/get-started-with-store-builder-library/).  ## Access the API  #### API Credentials and Authentication  FastSpring API credentials consist of a single username and password for your entire Store. The username and password are used for [Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) when making requests to the API.  #### Obtain Your API Credentials  1. Log on to the FastSpring App and navigate to [Integrations](https://fastspring.com/docs/integrations) > **API Credentials**. Initially, the only option on this page is the **Create** command.  2. Click **Create** to generate your API **Username** and **Password**. The page automatically refreshes, and then your credentials are displayed.  3. Make a note of the credentials and store them securely.  The API credentials allow complete access and control over your FastSpring Store. You will not be able to view the password in the FastSpring App after this session. If you forget your API credentials, you can reset them, however any of your stored procedures that rely on API access must be updated immediately with the new credentials. Otherwise, the API requests will fail.  ## API Requests  **Make all requests to https://api.fastspring.com**  When you make your requests, consider the following: - Ensure that the HTTP methods for all calls use uppercase letters (“GET,” “POST,” “DELETE”) Lowercase letters may result in a 404 error response. - FastSpring requires TLS 1.2 (or later) encryption for all calls to the FastSpring API.  - The API requires a **User-Agent** header in all requests. If your request does not include it, you may receive an 401 error message when attempting to make API requests. - The API uses basic authentication and does not support URL-encoded authentication. Use **Base64** to encode your username and password in the header. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ChangetheproductforanactivesubscriptionRequest;
import com.konfigthis.client.model.EstimateSubscriptionRequest;
import com.konfigthis.client.model.PauseSubscriptionRequest;
import com.konfigthis.client.model.Subscription;
import com.konfigthis.client.model.Subscription6;
import com.konfigthis.client.model.SubscriptionAddon;
import com.konfigthis.client.model.UncancelasubscriptionpriortodeactivationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SubscriptionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriptionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cancelSubscriptionByIdCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscription_id}"
            .replace("{" + "subscription_id" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelSubscriptionByIdValidateBeforeCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling cancelSubscriptionById(Async)");
        }

        return cancelSubscriptionByIdCall(subscriptionId, _callback);

    }


    private ApiResponse<Object> cancelSubscriptionByIdWithHttpInfo(String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = cancelSubscriptionByIdValidateBeforeCall(subscriptionId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelSubscriptionByIdAsync(String subscriptionId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelSubscriptionByIdValidateBeforeCall(subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelSubscriptionByIdRequestBuilder {
        private final String subscriptionId;

        private CancelSubscriptionByIdRequestBuilder(String subscriptionId) {
            this.subscriptionId = subscriptionId;
        }

        /**
         * Build call for cancelSubscriptionById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelSubscriptionByIdCall(subscriptionId, _callback);
        }


        /**
         * Execute cancelSubscriptionById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = cancelSubscriptionByIdWithHttpInfo(subscriptionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelSubscriptionById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return cancelSubscriptionByIdWithHttpInfo(subscriptionId);
        }

        /**
         * Execute cancelSubscriptionById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return cancelSubscriptionByIdAsync(subscriptionId, _callback);
        }
    }

    /**
     * Cancel a subscription
     * 
     * @param subscriptionId Subscription Id (required)
     * @return CancelSubscriptionByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CancelSubscriptionByIdRequestBuilder cancelSubscriptionById(String subscriptionId) throws IllegalArgumentException {
        if (subscriptionId == null) throw new IllegalArgumentException("\"subscriptionId\" is required but got null");
            

        return new CancelSubscriptionByIdRequestBuilder(subscriptionId);
    }
    private okhttp3.Call convertExpiredTrialWithoutPaymentMethodCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscription_id}/convert"
            .replace("{" + "subscription_id" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertExpiredTrialWithoutPaymentMethodValidateBeforeCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling convertExpiredTrialWithoutPaymentMethod(Async)");
        }

        return convertExpiredTrialWithoutPaymentMethodCall(subscriptionId, _callback);

    }


    private ApiResponse<Object> convertExpiredTrialWithoutPaymentMethodWithHttpInfo(String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = convertExpiredTrialWithoutPaymentMethodValidateBeforeCall(subscriptionId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call convertExpiredTrialWithoutPaymentMethodAsync(String subscriptionId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertExpiredTrialWithoutPaymentMethodValidateBeforeCall(subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ConvertExpiredTrialWithoutPaymentMethodRequestBuilder {
        private final String subscriptionId;

        private ConvertExpiredTrialWithoutPaymentMethodRequestBuilder(String subscriptionId) {
            this.subscriptionId = subscriptionId;
        }

        /**
         * Build call for convertExpiredTrialWithoutPaymentMethod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return convertExpiredTrialWithoutPaymentMethodCall(subscriptionId, _callback);
        }


        /**
         * Execute convertExpiredTrialWithoutPaymentMethod request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = convertExpiredTrialWithoutPaymentMethodWithHttpInfo(subscriptionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute convertExpiredTrialWithoutPaymentMethod request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return convertExpiredTrialWithoutPaymentMethodWithHttpInfo(subscriptionId);
        }

        /**
         * Execute convertExpiredTrialWithoutPaymentMethod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return convertExpiredTrialWithoutPaymentMethodAsync(subscriptionId, _callback);
        }
    }

    /**
     * Convert an Expired Trial Subscription without a Payment Method
     * 
     * @param subscriptionId Subscription Id (required)
     * @return ConvertExpiredTrialWithoutPaymentMethodRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ConvertExpiredTrialWithoutPaymentMethodRequestBuilder convertExpiredTrialWithoutPaymentMethod(String subscriptionId) throws IllegalArgumentException {
        if (subscriptionId == null) throw new IllegalArgumentException("\"subscriptionId\" is required but got null");
            

        return new ConvertExpiredTrialWithoutPaymentMethodRequestBuilder(subscriptionId);
    }
    private okhttp3.Call getAllSubscriptionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllSubscriptionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllSubscriptionsCall(_callback);

    }


    private ApiResponse<Object> getAllSubscriptionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllSubscriptionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllSubscriptionsAsync(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllSubscriptionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllSubscriptionsRequestBuilder {

        private GetAllSubscriptionsRequestBuilder() {
        }

        /**
         * Build call for getAllSubscriptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllSubscriptionsCall(_callback);
        }


        /**
         * Execute getAllSubscriptions request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getAllSubscriptionsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllSubscriptions request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getAllSubscriptionsWithHttpInfo();
        }

        /**
         * Execute getAllSubscriptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getAllSubscriptionsAsync(_callback);
        }
    }

    /**
     * Get all subscriptions
     * 
     * @return GetAllSubscriptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllSubscriptionsRequestBuilder getAllSubscriptions() throws IllegalArgumentException {
        return new GetAllSubscriptionsRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String subscriptionId, String accountId, String begin, String end, String event, String products, String scope, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscription_id}"
            .replace("{" + "subscription_id" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountId", accountId));
        }

        if (begin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("begin", begin));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        if (products != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("products", products));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String subscriptionId, String accountId, String begin, String end, String event, String products, String scope, String status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling getById(Async)");
        }

        return getByIdCall(subscriptionId, accountId, begin, end, event, products, scope, status, _callback);

    }


    private ApiResponse<Object> getByIdWithHttpInfo(String subscriptionId, String accountId, String begin, String end, String event, String products, String scope, String status) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(subscriptionId, accountId, begin, end, event, products, scope, status, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String subscriptionId, String accountId, String begin, String end, String event, String products, String scope, String status, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(subscriptionId, accountId, begin, end, event, products, scope, status, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String subscriptionId;
        private String accountId;
        private String begin;
        private String end;
        private String event;
        private String products;
        private String scope;
        private String status;

        private GetByIdRequestBuilder(String subscriptionId) {
            this.subscriptionId = subscriptionId;
        }

        /**
         * Set accountId
         * @param accountId specify a specific customer account whose subscriptions you want to retrieve (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }
        
        /**
         * Set begin
         * @param begin specify the beginning of a date range in yyyy-mm-dd-format (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder begin(String begin) {
            this.begin = begin;
            return this;
        }
        
        /**
         * Set end
         * @param end specify the end of a date range in yyyy-mm-dd format (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder end(String end) {
            this.end = end;
            return this;
        }
        
        /**
         * Set event
         * @param event In each event, use begin and end to retrieve the corresponding subscriptions (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder event(String event) {
            this.event = event;
            return this;
        }
        
        /**
         * Set products
         * @param products enter one or more product ids to filter the response to include only subscriptions for the specified products; use commas to separate multiple values (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder products(String products) {
            this.products = products;
            return this;
        }
        
        /**
         * Set scope
         * @param scope  (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(subscriptionId, accountId, begin, end, event, products, scope, status, _callback);
        }


        /**
         * Execute getById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getByIdWithHttpInfo(subscriptionId, accountId, begin, end, event, products, scope, status);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(subscriptionId, accountId, begin, end, event, products, scope, status);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getByIdAsync(subscriptionId, accountId, begin, end, event, products, scope, status, _callback);
        }
    }

    /**
     * Get a subscription
     * 
     * @param subscriptionId Subscription Id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String subscriptionId) throws IllegalArgumentException {
        if (subscriptionId == null) throw new IllegalArgumentException("\"subscriptionId\" is required but got null");
            

        return new GetByIdRequestBuilder(subscriptionId);
    }
    private okhttp3.Call getEntriesCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscription_id}/entries"
            .replace("{" + "subscription_id" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntriesValidateBeforeCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling getEntries(Async)");
        }

        return getEntriesCall(subscriptionId, _callback);

    }


    private ApiResponse<Void> getEntriesWithHttpInfo(String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = getEntriesValidateBeforeCall(subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getEntriesAsync(String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntriesValidateBeforeCall(subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetEntriesRequestBuilder {
        private final String subscriptionId;

        private GetEntriesRequestBuilder(String subscriptionId) {
            this.subscriptionId = subscriptionId;
        }

        /**
         * Build call for getEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEntriesCall(subscriptionId, _callback);
        }


        /**
         * Execute getEntries request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getEntriesWithHttpInfo(subscriptionId);
        }

        /**
         * Execute getEntries request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getEntriesWithHttpInfo(subscriptionId);
        }

        /**
         * Execute getEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getEntriesAsync(subscriptionId, _callback);
        }
    }

    /**
     * Get subscription entries
     * 
     * @param subscriptionId Subscription Id (required)
     * @return GetEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetEntriesRequestBuilder getEntries(String subscriptionId) throws IllegalArgumentException {
        if (subscriptionId == null) throw new IllegalArgumentException("\"subscriptionId\" is required but got null");
            

        return new GetEntriesRequestBuilder(subscriptionId);
    }
    private okhttp3.Call getPlanChangeHistoryCall(String subscriptionId, String scope, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscription_id}/history"
            .replace("{" + "subscription_id" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPlanChangeHistoryValidateBeforeCall(String subscriptionId, String scope, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling getPlanChangeHistory(Async)");
        }

        return getPlanChangeHistoryCall(subscriptionId, scope, order, _callback);

    }


    private ApiResponse<Void> getPlanChangeHistoryWithHttpInfo(String subscriptionId, String scope, String order) throws ApiException {
        okhttp3.Call localVarCall = getPlanChangeHistoryValidateBeforeCall(subscriptionId, scope, order, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getPlanChangeHistoryAsync(String subscriptionId, String scope, String order, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPlanChangeHistoryValidateBeforeCall(subscriptionId, scope, order, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetPlanChangeHistoryRequestBuilder {
        private final String subscriptionId;
        private String scope;
        private String order;

        private GetPlanChangeHistoryRequestBuilder(String subscriptionId) {
            this.subscriptionId = subscriptionId;
        }

        /**
         * Set scope
         * @param scope Type of items to return (optional)
         * @return GetPlanChangeHistoryRequestBuilder
         */
        public GetPlanChangeHistoryRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Set order
         * @param order Sort Order for the results (optional)
         * @return GetPlanChangeHistoryRequestBuilder
         */
        public GetPlanChangeHistoryRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getPlanChangeHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPlanChangeHistoryCall(subscriptionId, scope, order, _callback);
        }


        /**
         * Execute getPlanChangeHistory request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getPlanChangeHistoryWithHttpInfo(subscriptionId, scope, order);
        }

        /**
         * Execute getPlanChangeHistory request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getPlanChangeHistoryWithHttpInfo(subscriptionId, scope, order);
        }

        /**
         * Execute getPlanChangeHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getPlanChangeHistoryAsync(subscriptionId, scope, order, _callback);
        }
    }

    /**
     * Get subscription plan change history
     * 
     * @param subscriptionId Subscription Id (required)
     * @return GetPlanChangeHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetPlanChangeHistoryRequestBuilder getPlanChangeHistory(String subscriptionId) throws IllegalArgumentException {
        if (subscriptionId == null) throw new IllegalArgumentException("\"subscriptionId\" is required but got null");
            

        return new GetPlanChangeHistoryRequestBuilder(subscriptionId);
    }
    private okhttp3.Call pauseSubscriptionCall(String subscriptionId, PauseSubscriptionRequest pauseSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pauseSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscription_id}/pause"
            .replace("{" + "subscription_id" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pauseSubscriptionValidateBeforeCall(String subscriptionId, PauseSubscriptionRequest pauseSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pauseSubscription(Async)");
        }

        // verify the required parameter 'pauseSubscriptionRequest' is set
        if (pauseSubscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'pauseSubscriptionRequest' when calling pauseSubscription(Async)");
        }

        return pauseSubscriptionCall(subscriptionId, pauseSubscriptionRequest, _callback);

    }


    private ApiResponse<Object> pauseSubscriptionWithHttpInfo(String subscriptionId, PauseSubscriptionRequest pauseSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = pauseSubscriptionValidateBeforeCall(subscriptionId, pauseSubscriptionRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pauseSubscriptionAsync(String subscriptionId, PauseSubscriptionRequest pauseSubscriptionRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = pauseSubscriptionValidateBeforeCall(subscriptionId, pauseSubscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PauseSubscriptionRequestBuilder {
        private final String subscriptionId;
        private Integer pausePeriodCount;

        private PauseSubscriptionRequestBuilder(String subscriptionId) {
            this.subscriptionId = subscriptionId;
        }

        /**
         * Set pausePeriodCount
         * @param pausePeriodCount  (optional)
         * @return PauseSubscriptionRequestBuilder
         */
        public PauseSubscriptionRequestBuilder pausePeriodCount(Integer pausePeriodCount) {
            this.pausePeriodCount = pausePeriodCount;
            return this;
        }
        
        /**
         * Build call for pauseSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PauseSubscriptionRequest pauseSubscriptionRequest = buildBodyParams();
            return pauseSubscriptionCall(subscriptionId, pauseSubscriptionRequest, _callback);
        }

        private PauseSubscriptionRequest buildBodyParams() {
            PauseSubscriptionRequest pauseSubscriptionRequest = new PauseSubscriptionRequest();
            pauseSubscriptionRequest.pausePeriodCount(this.pausePeriodCount);
            return pauseSubscriptionRequest;
        }

        /**
         * Execute pauseSubscription request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            PauseSubscriptionRequest pauseSubscriptionRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = pauseSubscriptionWithHttpInfo(subscriptionId, pauseSubscriptionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute pauseSubscription request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            PauseSubscriptionRequest pauseSubscriptionRequest = buildBodyParams();
            return pauseSubscriptionWithHttpInfo(subscriptionId, pauseSubscriptionRequest);
        }

        /**
         * Execute pauseSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            PauseSubscriptionRequest pauseSubscriptionRequest = buildBodyParams();
            return pauseSubscriptionAsync(subscriptionId, pauseSubscriptionRequest, _callback);
        }
    }

    /**
     * Pause a subscription
     * 
     * @param subscriptionId Subscription Id (required)
     * @param pauseSubscriptionRequest  (required)
     * @return PauseSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PauseSubscriptionRequestBuilder pauseSubscription(String subscriptionId) throws IllegalArgumentException {
        if (subscriptionId == null) throw new IllegalArgumentException("\"subscriptionId\" is required but got null");
            

        return new PauseSubscriptionRequestBuilder(subscriptionId);
    }
    private okhttp3.Call previewPlanChangeCall(EstimateSubscriptionRequest estimateSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = estimateSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/estimate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call previewPlanChangeValidateBeforeCall(EstimateSubscriptionRequest estimateSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'estimateSubscriptionRequest' is set
        if (estimateSubscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'estimateSubscriptionRequest' when calling previewPlanChange(Async)");
        }

        return previewPlanChangeCall(estimateSubscriptionRequest, _callback);

    }


    private ApiResponse<Object> previewPlanChangeWithHttpInfo(EstimateSubscriptionRequest estimateSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = previewPlanChangeValidateBeforeCall(estimateSubscriptionRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call previewPlanChangeAsync(EstimateSubscriptionRequest estimateSubscriptionRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = previewPlanChangeValidateBeforeCall(estimateSubscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PreviewPlanChangeRequestBuilder {
        private final String subscription;
        private String product;
        private Integer quantity;
        private Price pricing;
        private List<SubscriptionAddon> addons;

        private PreviewPlanChangeRequestBuilder(String subscription) {
            this.subscription = subscription;
        }

        /**
         * Set product
         * @param product  (optional)
         * @return PreviewPlanChangeRequestBuilder
         */
        public PreviewPlanChangeRequestBuilder product(String product) {
            this.product = product;
            return this;
        }
        
        /**
         * Set quantity
         * @param quantity  (optional)
         * @return PreviewPlanChangeRequestBuilder
         */
        public PreviewPlanChangeRequestBuilder quantity(Integer quantity) {
            this.quantity = quantity;
            return this;
        }
        
        /**
         * Set pricing
         * @param pricing  (optional)
         * @return PreviewPlanChangeRequestBuilder
         */
        public PreviewPlanChangeRequestBuilder pricing(Price pricing) {
            this.pricing = pricing;
            return this;
        }
        
        /**
         * Set addons
         * @param addons  (optional)
         * @return PreviewPlanChangeRequestBuilder
         */
        public PreviewPlanChangeRequestBuilder addons(List<SubscriptionAddon> addons) {
            this.addons = addons;
            return this;
        }
        
        /**
         * Build call for previewPlanChange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EstimateSubscriptionRequest estimateSubscriptionRequest = buildBodyParams();
            return previewPlanChangeCall(estimateSubscriptionRequest, _callback);
        }

        private EstimateSubscriptionRequest buildBodyParams() {
            EstimateSubscriptionRequest estimateSubscriptionRequest = new EstimateSubscriptionRequest();
            estimateSubscriptionRequest.subscription(this.subscription);
            estimateSubscriptionRequest.product(this.product);
            estimateSubscriptionRequest.quantity(this.quantity);
            estimateSubscriptionRequest.pricing(this.pricing);
            estimateSubscriptionRequest.addons(this.addons);
            return estimateSubscriptionRequest;
        }

        /**
         * Execute previewPlanChange request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            EstimateSubscriptionRequest estimateSubscriptionRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = previewPlanChangeWithHttpInfo(estimateSubscriptionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute previewPlanChange request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            EstimateSubscriptionRequest estimateSubscriptionRequest = buildBodyParams();
            return previewPlanChangeWithHttpInfo(estimateSubscriptionRequest);
        }

        /**
         * Execute previewPlanChange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            EstimateSubscriptionRequest estimateSubscriptionRequest = buildBodyParams();
            return previewPlanChangeAsync(estimateSubscriptionRequest, _callback);
        }
    }

    /**
     * Preview a proposed prorated plan change
     * 
     * @param estimateSubscriptionRequest  (required)
     * @return PreviewPlanChangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PreviewPlanChangeRequestBuilder previewPlanChange(String subscription) throws IllegalArgumentException {
        if (subscription == null) throw new IllegalArgumentException("\"subscription\" is required but got null");
            

        return new PreviewPlanChangeRequestBuilder(subscription);
    }
    private okhttp3.Call rebillManagedSubscriptionCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/charge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rebillManagedSubscriptionValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling rebillManagedSubscription(Async)");
        }

        return rebillManagedSubscriptionCall(body, _callback);

    }


    private ApiResponse<Object> rebillManagedSubscriptionWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = rebillManagedSubscriptionValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call rebillManagedSubscriptionAsync(Object body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = rebillManagedSubscriptionValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RebillManagedSubscriptionRequestBuilder {
        private Object body;

        private RebillManagedSubscriptionRequestBuilder() {
        }

        /**
         * Set body
         * @param body  (optional)
         * @return RebillManagedSubscriptionRequestBuilder
         */
        public RebillManagedSubscriptionRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for rebillManagedSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return rebillManagedSubscriptionCall(body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute rebillManagedSubscription request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<Object> localVarResp = rebillManagedSubscriptionWithHttpInfo(body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute rebillManagedSubscription request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return rebillManagedSubscriptionWithHttpInfo(body);
        }

        /**
         * Execute rebillManagedSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Object body = buildBodyParams();
            return rebillManagedSubscriptionAsync(body, _callback);
        }
    }

    /**
     * Rebill a managed subscription
     * 
     * @param body  (required)
     * @return RebillManagedSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RebillManagedSubscriptionRequestBuilder rebillManagedSubscription() throws IllegalArgumentException {
        return new RebillManagedSubscriptionRequestBuilder();
    }
    private okhttp3.Call removeScheduledPauseCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscription_id}/resume"
            .replace("{" + "subscription_id" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeScheduledPauseValidateBeforeCall(String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling removeScheduledPause(Async)");
        }

        return removeScheduledPauseCall(subscriptionId, _callback);

    }


    private ApiResponse<Object> removeScheduledPauseWithHttpInfo(String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = removeScheduledPauseValidateBeforeCall(subscriptionId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeScheduledPauseAsync(String subscriptionId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeScheduledPauseValidateBeforeCall(subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveScheduledPauseRequestBuilder {
        private final String subscriptionId;

        private RemoveScheduledPauseRequestBuilder(String subscriptionId) {
            this.subscriptionId = subscriptionId;
        }

        /**
         * Build call for removeScheduledPause
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeScheduledPauseCall(subscriptionId, _callback);
        }


        /**
         * Execute removeScheduledPause request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = removeScheduledPauseWithHttpInfo(subscriptionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeScheduledPause request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return removeScheduledPauseWithHttpInfo(subscriptionId);
        }

        /**
         * Execute removeScheduledPause request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return removeScheduledPauseAsync(subscriptionId, _callback);
        }
    }

    /**
     * Remove a scheduled pause
     * 
     * @param subscriptionId Subscription Id (required)
     * @return RemoveScheduledPauseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveScheduledPauseRequestBuilder removeScheduledPause(String subscriptionId) throws IllegalArgumentException {
        if (subscriptionId == null) throw new IllegalArgumentException("\"subscriptionId\" is required but got null");
            

        return new RemoveScheduledPauseRequestBuilder(subscriptionId);
    }
    private okhttp3.Call resumeSubscriptionCall(String subscriptionId, UncancelasubscriptionpriortodeactivationRequest uncancelasubscriptionpriortodeactivationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uncancelasubscriptionpriortodeactivationRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscription_id}"
            .replace("{" + "subscription_id" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resumeSubscriptionValidateBeforeCall(String subscriptionId, UncancelasubscriptionpriortodeactivationRequest uncancelasubscriptionpriortodeactivationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling resumeSubscription(Async)");
        }

        // verify the required parameter 'uncancelasubscriptionpriortodeactivationRequest' is set
        if (uncancelasubscriptionpriortodeactivationRequest == null) {
            throw new ApiException("Missing the required parameter 'uncancelasubscriptionpriortodeactivationRequest' when calling resumeSubscription(Async)");
        }

        return resumeSubscriptionCall(subscriptionId, uncancelasubscriptionpriortodeactivationRequest, _callback);

    }


    private ApiResponse<Void> resumeSubscriptionWithHttpInfo(String subscriptionId, UncancelasubscriptionpriortodeactivationRequest uncancelasubscriptionpriortodeactivationRequest) throws ApiException {
        okhttp3.Call localVarCall = resumeSubscriptionValidateBeforeCall(subscriptionId, uncancelasubscriptionpriortodeactivationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call resumeSubscriptionAsync(String subscriptionId, UncancelasubscriptionpriortodeactivationRequest uncancelasubscriptionpriortodeactivationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = resumeSubscriptionValidateBeforeCall(subscriptionId, uncancelasubscriptionpriortodeactivationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ResumeSubscriptionRequestBuilder {
        private final List<Subscription6> subscriptions;
        private final String subscriptionId;

        private ResumeSubscriptionRequestBuilder(List<Subscription6> subscriptions, String subscriptionId) {
            this.subscriptions = subscriptions;
            this.subscriptionId = subscriptionId;
        }

        /**
         * Build call for resumeSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UncancelasubscriptionpriortodeactivationRequest uncancelasubscriptionpriortodeactivationRequest = buildBodyParams();
            return resumeSubscriptionCall(subscriptionId, uncancelasubscriptionpriortodeactivationRequest, _callback);
        }

        private UncancelasubscriptionpriortodeactivationRequest buildBodyParams() {
            UncancelasubscriptionpriortodeactivationRequest uncancelasubscriptionpriortodeactivationRequest = new UncancelasubscriptionpriortodeactivationRequest();
            uncancelasubscriptionpriortodeactivationRequest.subscriptions(this.subscriptions);
            return uncancelasubscriptionpriortodeactivationRequest;
        }

        /**
         * Execute resumeSubscription request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UncancelasubscriptionpriortodeactivationRequest uncancelasubscriptionpriortodeactivationRequest = buildBodyParams();
            resumeSubscriptionWithHttpInfo(subscriptionId, uncancelasubscriptionpriortodeactivationRequest);
        }

        /**
         * Execute resumeSubscription request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UncancelasubscriptionpriortodeactivationRequest uncancelasubscriptionpriortodeactivationRequest = buildBodyParams();
            return resumeSubscriptionWithHttpInfo(subscriptionId, uncancelasubscriptionpriortodeactivationRequest);
        }

        /**
         * Execute resumeSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UncancelasubscriptionpriortodeactivationRequest uncancelasubscriptionpriortodeactivationRequest = buildBodyParams();
            return resumeSubscriptionAsync(subscriptionId, uncancelasubscriptionpriortodeactivationRequest, _callback);
        }
    }

    /**
     * Resume a canceled subscription
     * 
     * @param subscriptionId Subscription Id (required)
     * @param uncancelasubscriptionpriortodeactivationRequest  (required)
     * @return ResumeSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ResumeSubscriptionRequestBuilder resumeSubscription(List<Subscription6> subscriptions, String subscriptionId) throws IllegalArgumentException {
        if (subscriptions == null) throw new IllegalArgumentException("\"subscriptions\" is required but got null");
        if (subscriptionId == null) throw new IllegalArgumentException("\"subscriptionId\" is required but got null");
            

        return new ResumeSubscriptionRequestBuilder(subscriptions, subscriptionId);
    }
    private okhttp3.Call updateSubscriptionCall(ChangetheproductforanactivesubscriptionRequest changetheproductforanactivesubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = changetheproductforanactivesubscriptionRequest;

        // create path and map variables
        String localVarPath = "/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSubscriptionValidateBeforeCall(ChangetheproductforanactivesubscriptionRequest changetheproductforanactivesubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'changetheproductforanactivesubscriptionRequest' is set
        if (changetheproductforanactivesubscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'changetheproductforanactivesubscriptionRequest' when calling updateSubscription(Async)");
        }

        return updateSubscriptionCall(changetheproductforanactivesubscriptionRequest, _callback);

    }


    private ApiResponse<Object> updateSubscriptionWithHttpInfo(ChangetheproductforanactivesubscriptionRequest changetheproductforanactivesubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(changetheproductforanactivesubscriptionRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSubscriptionAsync(ChangetheproductforanactivesubscriptionRequest changetheproductforanactivesubscriptionRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSubscriptionValidateBeforeCall(changetheproductforanactivesubscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSubscriptionRequestBuilder {
        private final List<Subscription> subscriptions;

        private UpdateSubscriptionRequestBuilder(List<Subscription> subscriptions) {
            this.subscriptions = subscriptions;
        }

        /**
         * Build call for updateSubscription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChangetheproductforanactivesubscriptionRequest changetheproductforanactivesubscriptionRequest = buildBodyParams();
            return updateSubscriptionCall(changetheproductforanactivesubscriptionRequest, _callback);
        }

        private ChangetheproductforanactivesubscriptionRequest buildBodyParams() {
            ChangetheproductforanactivesubscriptionRequest changetheproductforanactivesubscriptionRequest = new ChangetheproductforanactivesubscriptionRequest();
            changetheproductforanactivesubscriptionRequest.subscriptions(this.subscriptions);
            return changetheproductforanactivesubscriptionRequest;
        }

        /**
         * Execute updateSubscription request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ChangetheproductforanactivesubscriptionRequest changetheproductforanactivesubscriptionRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = updateSubscriptionWithHttpInfo(changetheproductforanactivesubscriptionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSubscription request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            ChangetheproductforanactivesubscriptionRequest changetheproductforanactivesubscriptionRequest = buildBodyParams();
            return updateSubscriptionWithHttpInfo(changetheproductforanactivesubscriptionRequest);
        }

        /**
         * Execute updateSubscription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            ChangetheproductforanactivesubscriptionRequest changetheproductforanactivesubscriptionRequest = buildBodyParams();
            return updateSubscriptionAsync(changetheproductforanactivesubscriptionRequest, _callback);
        }
    }

    /**
     * Update a subscription
     * 
     * @param changetheproductforanactivesubscriptionRequest  (required)
     * @return UpdateSubscriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSubscriptionRequestBuilder updateSubscription(List<Subscription> subscriptions) throws IllegalArgumentException {
        if (subscriptions == null) throw new IllegalArgumentException("\"subscriptions\" is required but got null");
        return new UpdateSubscriptionRequestBuilder(subscriptions);
    }
}
