/*
 * FastSpring API
 * The FastSpring API and its supported requests, data, endpoints, and rate limits.  The FastSpring API is a backend service you can use to communicate with your FastSpring Store programmatically. It requires basic understanding of HTTP communication methods. The primary API communication methods include: - **GET** - request data from your store - **POST** - send data to your store, such as creating a new product record - **DELETE** - remove data from your store  The structure of the JSON data sent and received using the API is very similar to Webhooks. However, using the FastSpring API, you initiate all communication with your FastSpring Store.  If you prefer a client-side method of communicating with your FastSpring Store and generating dynamic webpage content, check out the [Store Builder Library](https://fastspring.com/docs/get-started-with-store-builder-library/).  ## Access the API  #### API Credentials and Authentication  FastSpring API credentials consist of a single username and password for your entire Store. The username and password are used for [Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) when making requests to the API.  #### Obtain Your API Credentials  1. Log on to the FastSpring App and navigate to [Integrations](https://fastspring.com/docs/integrations) > **API Credentials**. Initially, the only option on this page is the **Create** command.  2. Click **Create** to generate your API **Username** and **Password**. The page automatically refreshes, and then your credentials are displayed.  3. Make a note of the credentials and store them securely.  The API credentials allow complete access and control over your FastSpring Store. You will not be able to view the password in the FastSpring App after this session. If you forget your API credentials, you can reset them, however any of your stored procedures that rely on API access must be updated immediately with the new credentials. Otherwise, the API requests will fail.  ## API Requests  **Make all requests to https://api.fastspring.com**  When you make your requests, consider the following: - Ensure that the HTTP methods for all calls use uppercase letters (“GET,” “POST,” “DELETE”) Lowercase letters may result in a 404 error response. - FastSpring requires TLS 1.2 (or later) encryption for all calls to the FastSpring API.  - The API requires a **User-Agent** header in all requests. If your request does not include it, you may receive an 401 error message when attempting to make API requests. - The API uses basic authentication and does not support URL-encoded authentication. Use **Base64** to encode your username and password in the header. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddressRequest;
import com.konfigthis.client.model.CollectionModelQuoteResponse;
import com.konfigthis.client.model.ContactRequest;
import com.konfigthis.client.model.CreateQuoteRequest;
import com.konfigthis.client.model.ItemRequest;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.QuoteResponse;
import com.konfigthis.client.model.QuotesUpdateQuoteByIdRequest;
import com.konfigthis.client.model.TagRequest;
import com.konfigthis.client.model.UpdateQuoteRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class QuotesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QuotesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public QuotesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cancelQuoteByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotes/{id}/cancel"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelQuoteByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cancelQuoteById(Async)");
        }

        return cancelQuoteByIdCall(id, _callback);

    }


    private ApiResponse<QuoteResponse> cancelQuoteByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = cancelQuoteByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelQuoteByIdAsync(String id, final ApiCallback<QuoteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelQuoteByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CancelQuoteByIdRequestBuilder {
        private final String id;

        private CancelQuoteByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for cancelQuoteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelQuoteByIdCall(id, _callback);
        }


        /**
         * Execute cancelQuoteById request
         * @return QuoteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public QuoteResponse execute() throws ApiException {
            ApiResponse<QuoteResponse> localVarResp = cancelQuoteByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cancelQuoteById request with HTTP info returned
         * @return ApiResponse&lt;QuoteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QuoteResponse> executeWithHttpInfo() throws ApiException {
            return cancelQuoteByIdWithHttpInfo(id);
        }

        /**
         * Execute cancelQuoteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QuoteResponse> _callback) throws ApiException {
            return cancelQuoteByIdAsync(id, _callback);
        }
    }

    /**
     * Cancel a quote
     * 
     * @param id A unique identifier for the quote (required)
     * @return CancelQuoteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CancelQuoteByIdRequestBuilder cancelQuoteById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CancelQuoteByIdRequestBuilder(id);
    }
    private okhttp3.Call createNewQuoteCall(CreateQuoteRequest createQuoteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createQuoteRequest;

        // create path and map variables
        String localVarPath = "/quotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewQuoteValidateBeforeCall(CreateQuoteRequest createQuoteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createQuoteRequest' is set
        if (createQuoteRequest == null) {
            throw new ApiException("Missing the required parameter 'createQuoteRequest' when calling createNewQuote(Async)");
        }

        return createNewQuoteCall(createQuoteRequest, _callback);

    }


    private ApiResponse<QuoteResponse> createNewQuoteWithHttpInfo(CreateQuoteRequest createQuoteRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewQuoteValidateBeforeCall(createQuoteRequest, null);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewQuoteAsync(CreateQuoteRequest createQuoteRequest, final ApiCallback<QuoteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewQuoteValidateBeforeCall(createQuoteRequest, _callback);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewQuoteRequestBuilder {
        private final List<ItemRequest> items;
        private final String name;
        private final AddressRequest recipientAddress;
        private final ContactRequest recipient;
        private List<TagRequest> tags;
        private String coupon;
        private String currency;
        private Integer expirationDateDays;
        private String fulfillmentTerm;
        private String notes;
        private Integer netTermsDays;
        private String taxId;
        private String source;
        private String sourceIP;

        private CreateNewQuoteRequestBuilder(List<ItemRequest> items, String name, AddressRequest recipientAddress, ContactRequest recipient) {
            this.items = items;
            this.name = name;
            this.recipientAddress = recipientAddress;
            this.recipient = recipient;
        }

        /**
         * Set tags
         * @param tags  (optional)
         * @return CreateNewQuoteRequestBuilder
         */
        public CreateNewQuoteRequestBuilder tags(List<TagRequest> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set coupon
         * @param coupon  (optional)
         * @return CreateNewQuoteRequestBuilder
         */
        public CreateNewQuoteRequestBuilder coupon(String coupon) {
            this.coupon = coupon;
            return this;
        }
        
        /**
         * Set currency
         * @param currency  (optional)
         * @return CreateNewQuoteRequestBuilder
         */
        public CreateNewQuoteRequestBuilder currency(String currency) {
            this.currency = currency;
            return this;
        }
        
        /**
         * Set expirationDateDays
         * @param expirationDateDays  (optional)
         * @return CreateNewQuoteRequestBuilder
         */
        public CreateNewQuoteRequestBuilder expirationDateDays(Integer expirationDateDays) {
            this.expirationDateDays = expirationDateDays;
            return this;
        }
        
        /**
         * Set fulfillmentTerm
         * @param fulfillmentTerm  (optional)
         * @return CreateNewQuoteRequestBuilder
         */
        public CreateNewQuoteRequestBuilder fulfillmentTerm(String fulfillmentTerm) {
            this.fulfillmentTerm = fulfillmentTerm;
            return this;
        }
        
        /**
         * Set notes
         * @param notes  (optional)
         * @return CreateNewQuoteRequestBuilder
         */
        public CreateNewQuoteRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Set netTermsDays
         * @param netTermsDays  (optional)
         * @return CreateNewQuoteRequestBuilder
         */
        public CreateNewQuoteRequestBuilder netTermsDays(Integer netTermsDays) {
            this.netTermsDays = netTermsDays;
            return this;
        }
        
        /**
         * Set taxId
         * @param taxId  (optional)
         * @return CreateNewQuoteRequestBuilder
         */
        public CreateNewQuoteRequestBuilder taxId(String taxId) {
            this.taxId = taxId;
            return this;
        }
        
        /**
         * Set source
         * @param source  (optional)
         * @return CreateNewQuoteRequestBuilder
         */
        public CreateNewQuoteRequestBuilder source(String source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set sourceIP
         * @param sourceIP  (optional)
         * @return CreateNewQuoteRequestBuilder
         */
        public CreateNewQuoteRequestBuilder sourceIP(String sourceIP) {
            this.sourceIP = sourceIP;
            return this;
        }
        
        /**
         * Build call for createNewQuote
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateQuoteRequest createQuoteRequest = buildBodyParams();
            return createNewQuoteCall(createQuoteRequest, _callback);
        }

        private CreateQuoteRequest buildBodyParams() {
            CreateQuoteRequest createQuoteRequest = new CreateQuoteRequest();
            createQuoteRequest.tags(this.tags);
            createQuoteRequest.coupon(this.coupon);
            createQuoteRequest.currency(this.currency);
            createQuoteRequest.expirationDateDays(this.expirationDateDays);
            createQuoteRequest.fulfillmentTerm(this.fulfillmentTerm);
            createQuoteRequest.items(this.items);
            createQuoteRequest.name(this.name);
            createQuoteRequest.notes(this.notes);
            createQuoteRequest.netTermsDays(this.netTermsDays);
            createQuoteRequest.recipientAddress(this.recipientAddress);
            createQuoteRequest.recipient(this.recipient);
            createQuoteRequest.taxId(this.taxId);
            createQuoteRequest.source(this.source);
            createQuoteRequest.sourceIP(this.sourceIP);
            return createQuoteRequest;
        }

        /**
         * Execute createNewQuote request
         * @return QuoteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public QuoteResponse execute() throws ApiException {
            CreateQuoteRequest createQuoteRequest = buildBodyParams();
            ApiResponse<QuoteResponse> localVarResp = createNewQuoteWithHttpInfo(createQuoteRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewQuote request with HTTP info returned
         * @return ApiResponse&lt;QuoteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QuoteResponse> executeWithHttpInfo() throws ApiException {
            CreateQuoteRequest createQuoteRequest = buildBodyParams();
            return createNewQuoteWithHttpInfo(createQuoteRequest);
        }

        /**
         * Execute createNewQuote request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QuoteResponse> _callback) throws ApiException {
            CreateQuoteRequest createQuoteRequest = buildBodyParams();
            return createNewQuoteAsync(createQuoteRequest, _callback);
        }
    }

    /**
     * Create a quote
     * 
     * @param createQuoteRequest  (required)
     * @return CreateNewQuoteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewQuoteRequestBuilder createNewQuote(List<ItemRequest> items, String name, AddressRequest recipientAddress, ContactRequest recipient) throws IllegalArgumentException {
        if (items == null) throw new IllegalArgumentException("\"items\" is required but got null");
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (recipientAddress == null) throw new IllegalArgumentException("\"recipientAddress\" is required but got null");
        if (recipient == null) throw new IllegalArgumentException("\"recipient\" is required but got null");
        return new CreateNewQuoteRequestBuilder(items, name, recipientAddress, recipient);
    }
    private okhttp3.Call deleteQuoteByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteQuoteByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteQuoteById(Async)");
        }

        return deleteQuoteByIdCall(id, _callback);

    }


    private ApiResponse<QuoteResponse> deleteQuoteByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteQuoteByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteQuoteByIdAsync(String id, final ApiCallback<QuoteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteQuoteByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteQuoteByIdRequestBuilder {
        private final String id;

        private DeleteQuoteByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteQuoteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteQuoteByIdCall(id, _callback);
        }


        /**
         * Execute deleteQuoteById request
         * @return QuoteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public QuoteResponse execute() throws ApiException {
            ApiResponse<QuoteResponse> localVarResp = deleteQuoteByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteQuoteById request with HTTP info returned
         * @return ApiResponse&lt;QuoteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QuoteResponse> executeWithHttpInfo() throws ApiException {
            return deleteQuoteByIdWithHttpInfo(id);
        }

        /**
         * Execute deleteQuoteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QuoteResponse> _callback) throws ApiException {
            return deleteQuoteByIdAsync(id, _callback);
        }
    }

    /**
     * Delete a quote
     * 
     * @param id A unique identifier for the quote (required)
     * @return DeleteQuoteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeleteQuoteByIdRequestBuilder deleteQuoteById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteQuoteByIdRequestBuilder(id);
    }
    private okhttp3.Call getAllQuotesCall(OffsetDateTime createdBegin, OffsetDateTime createdEnd, String createdEmail, OffsetDateTime expiresBegin, OffsetDateTime expiresEnd, String searchParam, OffsetDateTime expiredBefore, Boolean onlyQuoteId, List<String> statuses, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createdBegin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBegin", createdBegin));
        }

        if (createdEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdEnd", createdEnd));
        }

        if (createdEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdEmail", createdEmail));
        }

        if (expiresBegin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiresBegin", expiresBegin));
        }

        if (expiresEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiresEnd", expiresEnd));
        }

        if (searchParam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchParam", searchParam));
        }

        if (expiredBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiredBefore", expiredBefore));
        }

        if (onlyQuoteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyQuoteId", onlyQuoteId));
        }

        if (statuses != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "statuses", statuses));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllQuotesValidateBeforeCall(OffsetDateTime createdBegin, OffsetDateTime createdEnd, String createdEmail, OffsetDateTime expiresBegin, OffsetDateTime expiresEnd, String searchParam, OffsetDateTime expiredBefore, Boolean onlyQuoteId, List<String> statuses, final ApiCallback _callback) throws ApiException {
        return getAllQuotesCall(createdBegin, createdEnd, createdEmail, expiresBegin, expiresEnd, searchParam, expiredBefore, onlyQuoteId, statuses, _callback);

    }


    private ApiResponse<CollectionModelQuoteResponse> getAllQuotesWithHttpInfo(OffsetDateTime createdBegin, OffsetDateTime createdEnd, String createdEmail, OffsetDateTime expiresBegin, OffsetDateTime expiresEnd, String searchParam, OffsetDateTime expiredBefore, Boolean onlyQuoteId, List<String> statuses) throws ApiException {
        okhttp3.Call localVarCall = getAllQuotesValidateBeforeCall(createdBegin, createdEnd, createdEmail, expiresBegin, expiresEnd, searchParam, expiredBefore, onlyQuoteId, statuses, null);
        Type localVarReturnType = new TypeToken<CollectionModelQuoteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllQuotesAsync(OffsetDateTime createdBegin, OffsetDateTime createdEnd, String createdEmail, OffsetDateTime expiresBegin, OffsetDateTime expiresEnd, String searchParam, OffsetDateTime expiredBefore, Boolean onlyQuoteId, List<String> statuses, final ApiCallback<CollectionModelQuoteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllQuotesValidateBeforeCall(createdBegin, createdEnd, createdEmail, expiresBegin, expiresEnd, searchParam, expiredBefore, onlyQuoteId, statuses, _callback);
        Type localVarReturnType = new TypeToken<CollectionModelQuoteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllQuotesRequestBuilder {
        private OffsetDateTime createdBegin;
        private OffsetDateTime createdEnd;
        private String createdEmail;
        private OffsetDateTime expiresBegin;
        private OffsetDateTime expiresEnd;
        private String searchParam;
        private OffsetDateTime expiredBefore;
        private Boolean onlyQuoteId;
        private List<String> statuses;

        private GetAllQuotesRequestBuilder() {
        }

        /**
         * Set createdBegin
         * @param createdBegin The format must be YYYY-MM-DD (optional)
         * @return GetAllQuotesRequestBuilder
         */
        public GetAllQuotesRequestBuilder createdBegin(OffsetDateTime createdBegin) {
            this.createdBegin = createdBegin;
            return this;
        }
        
        /**
         * Set createdEnd
         * @param createdEnd The format must be YYYY-MM-DD (optional)
         * @return GetAllQuotesRequestBuilder
         */
        public GetAllQuotesRequestBuilder createdEnd(OffsetDateTime createdEnd) {
            this.createdEnd = createdEnd;
            return this;
        }
        
        /**
         * Set createdEmail
         * @param createdEmail  (optional)
         * @return GetAllQuotesRequestBuilder
         */
        public GetAllQuotesRequestBuilder createdEmail(String createdEmail) {
            this.createdEmail = createdEmail;
            return this;
        }
        
        /**
         * Set expiresBegin
         * @param expiresBegin The format must be YYYY-MM-DD (optional)
         * @return GetAllQuotesRequestBuilder
         */
        public GetAllQuotesRequestBuilder expiresBegin(OffsetDateTime expiresBegin) {
            this.expiresBegin = expiresBegin;
            return this;
        }
        
        /**
         * Set expiresEnd
         * @param expiresEnd The format must be YYYY-MM-DD (optional)
         * @return GetAllQuotesRequestBuilder
         */
        public GetAllQuotesRequestBuilder expiresEnd(OffsetDateTime expiresEnd) {
            this.expiresEnd = expiresEnd;
            return this;
        }
        
        /**
         * Set searchParam
         * @param searchParam  (optional)
         * @return GetAllQuotesRequestBuilder
         */
        public GetAllQuotesRequestBuilder searchParam(String searchParam) {
            this.searchParam = searchParam;
            return this;
        }
        
        /**
         * Set expiredBefore
         * @param expiredBefore The format must be YYYY-MM-DD (optional)
         * @return GetAllQuotesRequestBuilder
         */
        public GetAllQuotesRequestBuilder expiredBefore(OffsetDateTime expiredBefore) {
            this.expiredBefore = expiredBefore;
            return this;
        }
        
        /**
         * Set onlyQuoteId
         * @param onlyQuoteId  (optional)
         * @return GetAllQuotesRequestBuilder
         */
        public GetAllQuotesRequestBuilder onlyQuoteId(Boolean onlyQuoteId) {
            this.onlyQuoteId = onlyQuoteId;
            return this;
        }
        
        /**
         * Set statuses
         * @param statuses  (optional)
         * @return GetAllQuotesRequestBuilder
         */
        public GetAllQuotesRequestBuilder statuses(List<String> statuses) {
            this.statuses = statuses;
            return this;
        }
        
        /**
         * Build call for getAllQuotes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllQuotesCall(createdBegin, createdEnd, createdEmail, expiresBegin, expiresEnd, searchParam, expiredBefore, onlyQuoteId, statuses, _callback);
        }


        /**
         * Execute getAllQuotes request
         * @return CollectionModelQuoteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CollectionModelQuoteResponse execute() throws ApiException {
            ApiResponse<CollectionModelQuoteResponse> localVarResp = getAllQuotesWithHttpInfo(createdBegin, createdEnd, createdEmail, expiresBegin, expiresEnd, searchParam, expiredBefore, onlyQuoteId, statuses);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllQuotes request with HTTP info returned
         * @return ApiResponse&lt;CollectionModelQuoteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CollectionModelQuoteResponse> executeWithHttpInfo() throws ApiException {
            return getAllQuotesWithHttpInfo(createdBegin, createdEnd, createdEmail, expiresBegin, expiresEnd, searchParam, expiredBefore, onlyQuoteId, statuses);
        }

        /**
         * Execute getAllQuotes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CollectionModelQuoteResponse> _callback) throws ApiException {
            return getAllQuotesAsync(createdBegin, createdEnd, createdEmail, expiresBegin, expiresEnd, searchParam, expiredBefore, onlyQuoteId, statuses, _callback);
        }
    }

    /**
     * Get all quotes
     * 
     * @return GetAllQuotesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAllQuotesRequestBuilder getAllQuotes() throws IllegalArgumentException {
        return new GetAllQuotesRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quotes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<QuoteResponse> getByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, final ApiCallback<QuoteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;

        private GetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return QuoteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public QuoteResponse execute() throws ApiException {
            ApiResponse<QuoteResponse> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;QuoteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QuoteResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QuoteResponse> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * Get a quote
     * 
     * @param id  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call updateQuoteByIdCall(String id, QuotesUpdateQuoteByIdRequest quotesUpdateQuoteByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = quotesUpdateQuoteByIdRequest;

        // create path and map variables
        String localVarPath = "/quotes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateQuoteByIdValidateBeforeCall(String id, QuotesUpdateQuoteByIdRequest quotesUpdateQuoteByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateQuoteById(Async)");
        }

        // verify the required parameter 'quotesUpdateQuoteByIdRequest' is set
        if (quotesUpdateQuoteByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'quotesUpdateQuoteByIdRequest' when calling updateQuoteById(Async)");
        }

        return updateQuoteByIdCall(id, quotesUpdateQuoteByIdRequest, _callback);

    }


    private ApiResponse<QuoteResponse> updateQuoteByIdWithHttpInfo(String id, QuotesUpdateQuoteByIdRequest quotesUpdateQuoteByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = updateQuoteByIdValidateBeforeCall(id, quotesUpdateQuoteByIdRequest, null);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateQuoteByIdAsync(String id, QuotesUpdateQuoteByIdRequest quotesUpdateQuoteByIdRequest, final ApiCallback<QuoteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateQuoteByIdValidateBeforeCall(id, quotesUpdateQuoteByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateQuoteByIdRequestBuilder {
        private final String id;
        private UpdateQuoteRequest updateQuoteRequest;

        private UpdateQuoteByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set updateQuoteRequest
         * @param updateQuoteRequest  (optional)
         * @return UpdateQuoteByIdRequestBuilder
         */
        public UpdateQuoteByIdRequestBuilder updateQuoteRequest(UpdateQuoteRequest updateQuoteRequest) {
            this.updateQuoteRequest = updateQuoteRequest;
            return this;
        }
        
        /**
         * Build call for updateQuoteById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            QuotesUpdateQuoteByIdRequest quotesUpdateQuoteByIdRequest = buildBodyParams();
            return updateQuoteByIdCall(id, quotesUpdateQuoteByIdRequest, _callback);
        }

        private QuotesUpdateQuoteByIdRequest buildBodyParams() {
            QuotesUpdateQuoteByIdRequest quotesUpdateQuoteByIdRequest = new QuotesUpdateQuoteByIdRequest();
            quotesUpdateQuoteByIdRequest.updateQuoteRequest(this.updateQuoteRequest);
            return quotesUpdateQuoteByIdRequest;
        }

        /**
         * Execute updateQuoteById request
         * @return QuoteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public QuoteResponse execute() throws ApiException {
            QuotesUpdateQuoteByIdRequest quotesUpdateQuoteByIdRequest = buildBodyParams();
            ApiResponse<QuoteResponse> localVarResp = updateQuoteByIdWithHttpInfo(id, quotesUpdateQuoteByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateQuoteById request with HTTP info returned
         * @return ApiResponse&lt;QuoteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<QuoteResponse> executeWithHttpInfo() throws ApiException {
            QuotesUpdateQuoteByIdRequest quotesUpdateQuoteByIdRequest = buildBodyParams();
            return updateQuoteByIdWithHttpInfo(id, quotesUpdateQuoteByIdRequest);
        }

        /**
         * Execute updateQuoteById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<QuoteResponse> _callback) throws ApiException {
            QuotesUpdateQuoteByIdRequest quotesUpdateQuoteByIdRequest = buildBodyParams();
            return updateQuoteByIdAsync(id, quotesUpdateQuoteByIdRequest, _callback);
        }
    }

    /**
     * Update a quote
     * 
     * @param id A unique identifier for the quote (required)
     * @param quotesUpdateQuoteByIdRequest  (required)
     * @return UpdateQuoteByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdateQuoteByIdRequestBuilder updateQuoteById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateQuoteByIdRequestBuilder(id);
    }
}
