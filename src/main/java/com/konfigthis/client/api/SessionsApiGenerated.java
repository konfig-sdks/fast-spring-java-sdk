/*
 * FastSpring API
 * The FastSpring API and its supported requests, data, endpoints, and rate limits.  The FastSpring API is a backend service you can use to communicate with your FastSpring Store programmatically. It requires basic understanding of HTTP communication methods. The primary API communication methods include: - **GET** - request data from your store - **POST** - send data to your store, such as creating a new product record - **DELETE** - remove data from your store  The structure of the JSON data sent and received using the API is very similar to Webhooks. However, using the FastSpring API, you initiate all communication with your FastSpring Store.  If you prefer a client-side method of communicating with your FastSpring Store and generating dynamic webpage content, check out the [Store Builder Library](https://fastspring.com/docs/get-started-with-store-builder-library/).  ## Access the API  #### API Credentials and Authentication  FastSpring API credentials consist of a single username and password for your entire Store. The username and password are used for [Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) when making requests to the API.  #### Obtain Your API Credentials  1. Log on to the FastSpring App and navigate to [Integrations](https://fastspring.com/docs/integrations) > **API Credentials**. Initially, the only option on this page is the **Create** command.  2. Click **Create** to generate your API **Username** and **Password**. The page automatically refreshes, and then your credentials are displayed.  3. Make a note of the credentials and store them securely.  The API credentials allow complete access and control over your FastSpring Store. You will not be able to view the password in the FastSpring App after this session. If you forget your API credentials, you can reset them, however any of your stored procedures that rely on API access must be updated immediately with the new credentials. Otherwise, the API requests will fail.  ## API Requests  **Make all requests to https://api.fastspring.com**  When you make your requests, consider the following: - Ensure that the HTTP methods for all calls use uppercase letters (“GET,” “POST,” “DELETE”) Lowercase letters may result in a 404 error response. - FastSpring requires TLS 1.2 (or later) encryption for all calls to the FastSpring API.  - The API requires a **User-Agent** header in all requests. If your request does not include it, you may receive an 401 error message when attempting to make API requests. - The API uses basic authentication and does not support URL-encoded authentication. Use **Base64** to encode your username and password in the header. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateasessionwithoutoverridinganydefaultvaluesRequest;
import com.konfigthis.client.model.Item2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SessionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SessionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SessionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewSessionCall(CreateasessionwithoutoverridinganydefaultvaluesRequest createasessionwithoutoverridinganydefaultvaluesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createasessionwithoutoverridinganydefaultvaluesRequest;

        // create path and map variables
        String localVarPath = "/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewSessionValidateBeforeCall(CreateasessionwithoutoverridinganydefaultvaluesRequest createasessionwithoutoverridinganydefaultvaluesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createasessionwithoutoverridinganydefaultvaluesRequest' is set
        if (createasessionwithoutoverridinganydefaultvaluesRequest == null) {
            throw new ApiException("Missing the required parameter 'createasessionwithoutoverridinganydefaultvaluesRequest' when calling createNewSession(Async)");
        }

        return createNewSessionCall(createasessionwithoutoverridinganydefaultvaluesRequest, _callback);

    }


    private ApiResponse<Object> createNewSessionWithHttpInfo(CreateasessionwithoutoverridinganydefaultvaluesRequest createasessionwithoutoverridinganydefaultvaluesRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewSessionValidateBeforeCall(createasessionwithoutoverridinganydefaultvaluesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewSessionAsync(CreateasessionwithoutoverridinganydefaultvaluesRequest createasessionwithoutoverridinganydefaultvaluesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewSessionValidateBeforeCall(createasessionwithoutoverridinganydefaultvaluesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewSessionRequestBuilder {
        private final String account;
        private final List<Item2> items;

        private CreateNewSessionRequestBuilder(String account, List<Item2> items) {
            this.account = account;
            this.items = items;
        }

        /**
         * Build call for createNewSession
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateasessionwithoutoverridinganydefaultvaluesRequest createasessionwithoutoverridinganydefaultvaluesRequest = buildBodyParams();
            return createNewSessionCall(createasessionwithoutoverridinganydefaultvaluesRequest, _callback);
        }

        private CreateasessionwithoutoverridinganydefaultvaluesRequest buildBodyParams() {
            CreateasessionwithoutoverridinganydefaultvaluesRequest createasessionwithoutoverridinganydefaultvaluesRequest = new CreateasessionwithoutoverridinganydefaultvaluesRequest();
            createasessionwithoutoverridinganydefaultvaluesRequest.account(this.account);
            createasessionwithoutoverridinganydefaultvaluesRequest.items(this.items);
            return createasessionwithoutoverridinganydefaultvaluesRequest;
        }

        /**
         * Execute createNewSession request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateasessionwithoutoverridinganydefaultvaluesRequest createasessionwithoutoverridinganydefaultvaluesRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = createNewSessionWithHttpInfo(createasessionwithoutoverridinganydefaultvaluesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewSession request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateasessionwithoutoverridinganydefaultvaluesRequest createasessionwithoutoverridinganydefaultvaluesRequest = buildBodyParams();
            return createNewSessionWithHttpInfo(createasessionwithoutoverridinganydefaultvaluesRequest);
        }

        /**
         * Execute createNewSession request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateasessionwithoutoverridinganydefaultvaluesRequest createasessionwithoutoverridinganydefaultvaluesRequest = buildBodyParams();
            return createNewSessionAsync(createasessionwithoutoverridinganydefaultvaluesRequest, _callback);
        }
    }

    /**
     * Create a session
     * 
     * @param createasessionwithoutoverridinganydefaultvaluesRequest  (required)
     * @return CreateNewSessionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewSessionRequestBuilder createNewSession(String account, List<Item2> items) throws IllegalArgumentException {
        if (account == null) throw new IllegalArgumentException("\"account\" is required but got null");
            

        if (items == null) throw new IllegalArgumentException("\"items\" is required but got null");
        return new CreateNewSessionRequestBuilder(account, items);
    }
}
