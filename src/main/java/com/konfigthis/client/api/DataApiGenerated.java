/*
 * FastSpring API
 * The FastSpring API and its supported requests, data, endpoints, and rate limits.  The FastSpring API is a backend service you can use to communicate with your FastSpring Store programmatically. It requires basic understanding of HTTP communication methods. The primary API communication methods include: - **GET** - request data from your store - **POST** - send data to your store, such as creating a new product record - **DELETE** - remove data from your store  The structure of the JSON data sent and received using the API is very similar to Webhooks. However, using the FastSpring API, you initiate all communication with your FastSpring Store.  If you prefer a client-side method of communicating with your FastSpring Store and generating dynamic webpage content, check out the [Store Builder Library](https://fastspring.com/docs/get-started-with-store-builder-library/).  ## Access the API  #### API Credentials and Authentication  FastSpring API credentials consist of a single username and password for your entire Store. The username and password are used for [Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) when making requests to the API.  #### Obtain Your API Credentials  1. Log on to the FastSpring App and navigate to [Integrations](https://fastspring.com/docs/integrations) > **API Credentials**. Initially, the only option on this page is the **Create** command.  2. Click **Create** to generate your API **Username** and **Password**. The page automatically refreshes, and then your credentials are displayed.  3. Make a note of the credentials and store them securely.  The API credentials allow complete access and control over your FastSpring Store. You will not be able to view the password in the FastSpring App after this session. If you forget your API credentials, you can reset them, however any of your stored procedures that rely on API access must be updated immediately with the new credentials. Otherwise, the API requests will fail.  ## API Requests  **Make all requests to https://api.fastspring.com**  When you make your requests, consider the following: - Ensure that the HTTP methods for all calls use uppercase letters (“GET,” “POST,” “DELETE”) Lowercase letters may result in a 404 error response. - FastSpring requires TLS 1.2 (or later) encryption for all calls to the FastSpring API.  - The API requires a **User-Agent** header in all requests. If your request does not include it, you may receive an 401 error message when attempting to make API requests. - The API uses basic authentication and does not support URL-encoded authentication. Use **Base64** to encode your username and password in the header. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.FilterRevenueReportRequest;
import com.konfigthis.client.model.FilterSubscriptionReportRequest;
import com.konfigthis.client.model.GenerateRevenueReportRequest;
import com.konfigthis.client.model.GenerateSubscriptionReportRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DataApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DataApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call downloadReportByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/downloads/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadReportByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling downloadReportById(Async)");
        }

        return downloadReportByIdCall(id, _callback);

    }


    private ApiResponse<String> downloadReportByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = downloadReportByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadReportByIdAsync(String id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadReportByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DownloadReportByIdRequestBuilder {
        private final String id;

        private DownloadReportByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for downloadReportById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadReportByIdCall(id, _callback);
        }


        /**
         * Execute downloadReportById request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = downloadReportByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute downloadReportById request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return downloadReportByIdWithHttpInfo(id);
        }

        /**
         * Execute downloadReportById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return downloadReportByIdAsync(id, _callback);
        }
    }

    /**
     * Download a report based on job ID.
     * 
     * @param id  (required)
     * @return DownloadReportByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DownloadReportByIdRequestBuilder downloadReportById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DownloadReportByIdRequestBuilder(id);
    }
    private okhttp3.Call generateRevenueReportCall(GenerateRevenueReportRequest generateRevenueReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateRevenueReportRequest;

        // create path and map variables
        String localVarPath = "/data/v1/revenue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateRevenueReportValidateBeforeCall(GenerateRevenueReportRequest generateRevenueReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateRevenueReportRequest' is set
        if (generateRevenueReportRequest == null) {
            throw new ApiException("Missing the required parameter 'generateRevenueReportRequest' when calling generateRevenueReport(Async)");
        }

        return generateRevenueReportCall(generateRevenueReportRequest, _callback);

    }


    private ApiResponse<Object> generateRevenueReportWithHttpInfo(GenerateRevenueReportRequest generateRevenueReportRequest) throws ApiException {
        okhttp3.Call localVarCall = generateRevenueReportValidateBeforeCall(generateRevenueReportRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateRevenueReportAsync(GenerateRevenueReportRequest generateRevenueReportRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateRevenueReportValidateBeforeCall(generateRevenueReportRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateRevenueReportRequestBuilder {
        private FilterRevenueReportRequest filter;
        private List<String> reportColumns;
        private List<String> groupBy;
        private Integer pageCount;
        private Integer pageNumber;
        private Boolean async;
        private List<String> notificationEmails;

        private GenerateRevenueReportRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter  (optional)
         * @return GenerateRevenueReportRequestBuilder
         */
        public GenerateRevenueReportRequestBuilder filter(FilterRevenueReportRequest filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set reportColumns
         * @param reportColumns  (optional)
         * @return GenerateRevenueReportRequestBuilder
         */
        public GenerateRevenueReportRequestBuilder reportColumns(List<String> reportColumns) {
            this.reportColumns = reportColumns;
            return this;
        }
        
        /**
         * Set groupBy
         * @param groupBy  (optional)
         * @return GenerateRevenueReportRequestBuilder
         */
        public GenerateRevenueReportRequestBuilder groupBy(List<String> groupBy) {
            this.groupBy = groupBy;
            return this;
        }
        
        /**
         * Set pageCount
         * @param pageCount  (optional)
         * @return GenerateRevenueReportRequestBuilder
         */
        public GenerateRevenueReportRequestBuilder pageCount(Integer pageCount) {
            this.pageCount = pageCount;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return GenerateRevenueReportRequestBuilder
         */
        public GenerateRevenueReportRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set async
         * @param async  (optional)
         * @return GenerateRevenueReportRequestBuilder
         */
        public GenerateRevenueReportRequestBuilder async(Boolean async) {
            this.async = async;
            return this;
        }
        
        /**
         * Set notificationEmails
         * @param notificationEmails  (optional)
         * @return GenerateRevenueReportRequestBuilder
         */
        public GenerateRevenueReportRequestBuilder notificationEmails(List<String> notificationEmails) {
            this.notificationEmails = notificationEmails;
            return this;
        }
        
        /**
         * Build call for generateRevenueReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Revenue response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GenerateRevenueReportRequest generateRevenueReportRequest = buildBodyParams();
            return generateRevenueReportCall(generateRevenueReportRequest, _callback);
        }

        private GenerateRevenueReportRequest buildBodyParams() {
            GenerateRevenueReportRequest generateRevenueReportRequest = new GenerateRevenueReportRequest();
            generateRevenueReportRequest.filter(this.filter);
            generateRevenueReportRequest.reportColumns(this.reportColumns);
            generateRevenueReportRequest.groupBy(this.groupBy);
            generateRevenueReportRequest.pageCount(this.pageCount);
            generateRevenueReportRequest.pageNumber(this.pageNumber);
            generateRevenueReportRequest.async(this.async);
            generateRevenueReportRequest.notificationEmails(this.notificationEmails);
            return generateRevenueReportRequest;
        }

        /**
         * Execute generateRevenueReport request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Revenue response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            GenerateRevenueReportRequest generateRevenueReportRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = generateRevenueReportWithHttpInfo(generateRevenueReportRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateRevenueReport request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Revenue response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            GenerateRevenueReportRequest generateRevenueReportRequest = buildBodyParams();
            return generateRevenueReportWithHttpInfo(generateRevenueReportRequest);
        }

        /**
         * Execute generateRevenueReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Revenue response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            GenerateRevenueReportRequest generateRevenueReportRequest = buildBodyParams();
            return generateRevenueReportAsync(generateRevenueReportRequest, _callback);
        }
    }

    /**
     * Generates a revenue report
     * 
     * @param generateRevenueReportRequest  (required)
     * @return GenerateRevenueReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revenue response </td><td>  -  </td></tr>
     </table>
     */
    public GenerateRevenueReportRequestBuilder generateRevenueReport() throws IllegalArgumentException {
        return new GenerateRevenueReportRequestBuilder();
    }
    private okhttp3.Call generateSubscriptionReportCall(GenerateSubscriptionReportRequest generateSubscriptionReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateSubscriptionReportRequest;

        // create path and map variables
        String localVarPath = "/data/v1/subscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateSubscriptionReportValidateBeforeCall(GenerateSubscriptionReportRequest generateSubscriptionReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateSubscriptionReportRequest' is set
        if (generateSubscriptionReportRequest == null) {
            throw new ApiException("Missing the required parameter 'generateSubscriptionReportRequest' when calling generateSubscriptionReport(Async)");
        }

        return generateSubscriptionReportCall(generateSubscriptionReportRequest, _callback);

    }


    private ApiResponse<Object> generateSubscriptionReportWithHttpInfo(GenerateSubscriptionReportRequest generateSubscriptionReportRequest) throws ApiException {
        okhttp3.Call localVarCall = generateSubscriptionReportValidateBeforeCall(generateSubscriptionReportRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateSubscriptionReportAsync(GenerateSubscriptionReportRequest generateSubscriptionReportRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateSubscriptionReportValidateBeforeCall(generateSubscriptionReportRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateSubscriptionReportRequestBuilder {
        private FilterSubscriptionReportRequest filter;
        private List<String> reportColumns;
        private List<String> groupBy;
        private Integer pageCount;
        private Integer pageNumber;
        private Boolean async;
        private List<String> notificationEmails;

        private GenerateSubscriptionReportRequestBuilder() {
        }

        /**
         * Set filter
         * @param filter  (optional)
         * @return GenerateSubscriptionReportRequestBuilder
         */
        public GenerateSubscriptionReportRequestBuilder filter(FilterSubscriptionReportRequest filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set reportColumns
         * @param reportColumns  (optional)
         * @return GenerateSubscriptionReportRequestBuilder
         */
        public GenerateSubscriptionReportRequestBuilder reportColumns(List<String> reportColumns) {
            this.reportColumns = reportColumns;
            return this;
        }
        
        /**
         * Set groupBy
         * @param groupBy  (optional)
         * @return GenerateSubscriptionReportRequestBuilder
         */
        public GenerateSubscriptionReportRequestBuilder groupBy(List<String> groupBy) {
            this.groupBy = groupBy;
            return this;
        }
        
        /**
         * Set pageCount
         * @param pageCount  (optional)
         * @return GenerateSubscriptionReportRequestBuilder
         */
        public GenerateSubscriptionReportRequestBuilder pageCount(Integer pageCount) {
            this.pageCount = pageCount;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber  (optional)
         * @return GenerateSubscriptionReportRequestBuilder
         */
        public GenerateSubscriptionReportRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set async
         * @param async  (optional)
         * @return GenerateSubscriptionReportRequestBuilder
         */
        public GenerateSubscriptionReportRequestBuilder async(Boolean async) {
            this.async = async;
            return this;
        }
        
        /**
         * Set notificationEmails
         * @param notificationEmails  (optional)
         * @return GenerateSubscriptionReportRequestBuilder
         */
        public GenerateSubscriptionReportRequestBuilder notificationEmails(List<String> notificationEmails) {
            this.notificationEmails = notificationEmails;
            return this;
        }
        
        /**
         * Build call for generateSubscriptionReport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Subscription response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GenerateSubscriptionReportRequest generateSubscriptionReportRequest = buildBodyParams();
            return generateSubscriptionReportCall(generateSubscriptionReportRequest, _callback);
        }

        private GenerateSubscriptionReportRequest buildBodyParams() {
            GenerateSubscriptionReportRequest generateSubscriptionReportRequest = new GenerateSubscriptionReportRequest();
            generateSubscriptionReportRequest.filter(this.filter);
            generateSubscriptionReportRequest.reportColumns(this.reportColumns);
            generateSubscriptionReportRequest.groupBy(this.groupBy);
            generateSubscriptionReportRequest.pageCount(this.pageCount);
            generateSubscriptionReportRequest.pageNumber(this.pageNumber);
            generateSubscriptionReportRequest.async(this.async);
            generateSubscriptionReportRequest.notificationEmails(this.notificationEmails);
            return generateSubscriptionReportRequest;
        }

        /**
         * Execute generateSubscriptionReport request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Subscription response </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            GenerateSubscriptionReportRequest generateSubscriptionReportRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = generateSubscriptionReportWithHttpInfo(generateSubscriptionReportRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateSubscriptionReport request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Subscription response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            GenerateSubscriptionReportRequest generateSubscriptionReportRequest = buildBodyParams();
            return generateSubscriptionReportWithHttpInfo(generateSubscriptionReportRequest);
        }

        /**
         * Execute generateSubscriptionReport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Subscription response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            GenerateSubscriptionReportRequest generateSubscriptionReportRequest = buildBodyParams();
            return generateSubscriptionReportAsync(generateSubscriptionReportRequest, _callback);
        }
    }

    /**
     * Generates a subscription report
     * 
     * @param generateSubscriptionReportRequest  (required)
     * @return GenerateSubscriptionReportRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription response </td><td>  -  </td></tr>
     </table>
     */
    public GenerateSubscriptionReportRequestBuilder generateSubscriptionReport() throws IllegalArgumentException {
        return new GenerateSubscriptionReportRequestBuilder();
    }
    private okhttp3.Call getJobInformationCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/jobs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobInformationValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getJobInformation(Async)");
        }

        return getJobInformationCall(id, _callback);

    }


    private ApiResponse<Object> getJobInformationWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getJobInformationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobInformationAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobInformationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobInformationRequestBuilder {
        private final String id;

        private GetJobInformationRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getJobInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobInformationCall(id, _callback);
        }


        /**
         * Execute getJobInformation request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getJobInformationWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobInformation request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getJobInformationWithHttpInfo(id);
        }

        /**
         * Execute getJobInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getJobInformationAsync(id, _callback);
        }
    }

    /**
     * Get job information based on a job ID.
     * 
     * @param id  (required)
     * @return GetJobInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetJobInformationRequestBuilder getJobInformation(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetJobInformationRequestBuilder(id);
    }
    private okhttp3.Call getJobInformation_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobInformation_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getJobInformation_0Call(_callback);

    }


    private ApiResponse<Object> getJobInformation_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getJobInformation_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobInformation_0Async(final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobInformation_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobInformation0RequestBuilder {

        private GetJobInformation0RequestBuilder() {
        }

        /**
         * Build call for getJobInformation_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobInformation_0Call(_callback);
        }


        /**
         * Execute getJobInformation_0 request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getJobInformation_0WithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobInformation_0 request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getJobInformation_0WithHttpInfo();
        }

        /**
         * Execute getJobInformation_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getJobInformation_0Async(_callback);
        }
    }

    /**
     * Get information from a job listing.
     * 
     * @return GetJobInformation0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetJobInformation0RequestBuilder getJobInformation_0() throws IllegalArgumentException {
        return new GetJobInformation0RequestBuilder();
    }
    private okhttp3.Call resetCacheForServiceEndPointsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data/v1/util/cache";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetCacheForServiceEndPointsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return resetCacheForServiceEndPointsCall(_callback);

    }


    private ApiResponse<String> resetCacheForServiceEndPointsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = resetCacheForServiceEndPointsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call resetCacheForServiceEndPointsAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetCacheForServiceEndPointsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ResetCacheForServiceEndPointsRequestBuilder {

        private ResetCacheForServiceEndPointsRequestBuilder() {
        }

        /**
         * Build call for resetCacheForServiceEndPoints
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return resetCacheForServiceEndPointsCall(_callback);
        }


        /**
         * Execute resetCacheForServiceEndPoints request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = resetCacheForServiceEndPointsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute resetCacheForServiceEndPoints request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return resetCacheForServiceEndPointsWithHttpInfo();
        }

        /**
         * Execute resetCacheForServiceEndPoints request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return resetCacheForServiceEndPointsAsync(_callback);
        }
    }

    /**
     * Reset cache for data service end points.
     * 
     * @return ResetCacheForServiceEndPointsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResetCacheForServiceEndPointsRequestBuilder resetCacheForServiceEndPoints() throws IllegalArgumentException {
        return new ResetCacheForServiceEndPointsRequestBuilder();
    }
}
