/*
 * FastSpring API
 * The FastSpring API and its supported requests, data, endpoints, and rate limits.  The FastSpring API is a backend service you can use to communicate with your FastSpring Store programmatically. It requires basic understanding of HTTP communication methods. The primary API communication methods include: - **GET** - request data from your store - **POST** - send data to your store, such as creating a new product record - **DELETE** - remove data from your store  The structure of the JSON data sent and received using the API is very similar to Webhooks. However, using the FastSpring API, you initiate all communication with your FastSpring Store.  If you prefer a client-side method of communicating with your FastSpring Store and generating dynamic webpage content, check out the [Store Builder Library](https://fastspring.com/docs/get-started-with-store-builder-library/).  ## Access the API  #### API Credentials and Authentication  FastSpring API credentials consist of a single username and password for your entire Store. The username and password are used for [Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) when making requests to the API.  #### Obtain Your API Credentials  1. Log on to the FastSpring App and navigate to [Integrations](https://fastspring.com/docs/integrations) > **API Credentials**. Initially, the only option on this page is the **Create** command.  2. Click **Create** to generate your API **Username** and **Password**. The page automatically refreshes, and then your credentials are displayed.  3. Make a note of the credentials and store them securely.  The API credentials allow complete access and control over your FastSpring Store. You will not be able to view the password in the FastSpring App after this session. If you forget your API credentials, you can reset them, however any of your stored procedures that rely on API access must be updated immediately with the new credentials. Otherwise, the API requests will fail.  ## API Requests  **Make all requests to https://api.fastspring.com**  When you make your requests, consider the following: - Ensure that the HTTP methods for all calls use uppercase letters (“GET,” “POST,” “DELETE”) Lowercase letters may result in a 404 error response. - FastSpring requires TLS 1.2 (or later) encryption for all calls to the FastSpring API.  - The API requires a **User-Agent** header in all requests. If your request does not include it, you may receive an 401 error message when attempting to make API requests. - The API uses basic authentication and does not support URL-encoded authentication. Use **Base64** to encode your username and password in the header. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateOneAccount;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccountsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewAccountCall(CreateOneAccount createOneAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOneAccount;

        // create path and map variables
        String localVarPath = "/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewAccountValidateBeforeCall(CreateOneAccount createOneAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createOneAccount' is set
        if (createOneAccount == null) {
            throw new ApiException("Missing the required parameter 'createOneAccount' when calling createNewAccount(Async)");
        }

        return createNewAccountCall(createOneAccount, _callback);

    }


    private ApiResponse<Object> createNewAccountWithHttpInfo(CreateOneAccount createOneAccount) throws ApiException {
        okhttp3.Call localVarCall = createNewAccountValidateBeforeCall(createOneAccount, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAccountAsync(CreateOneAccount createOneAccount, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewAccountValidateBeforeCall(createOneAccount, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewAccountRequestBuilder {
        private ContactRequest contact;

        private CreateNewAccountRequestBuilder() {
        }

        /**
         * Set contact
         * @param contact  (optional)
         * @return CreateNewAccountRequestBuilder
         */
        public CreateNewAccountRequestBuilder contact(ContactRequest contact) {
            this.contact = contact;
            return this;
        }
        
        /**
         * Build call for createNewAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateOneAccount createOneAccount = buildBodyParams();
            return createNewAccountCall(createOneAccount, _callback);
        }

        private CreateOneAccount buildBodyParams() {
            CreateOneAccount createOneAccount = new CreateOneAccount();
            createOneAccount.contact(this.contact);
            return createOneAccount;
        }

        /**
         * Execute createNewAccount request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateOneAccount createOneAccount = buildBodyParams();
            ApiResponse<Object> localVarResp = createNewAccountWithHttpInfo(createOneAccount);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewAccount request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateOneAccount createOneAccount = buildBodyParams();
            return createNewAccountWithHttpInfo(createOneAccount);
        }

        /**
         * Execute createNewAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateOneAccount createOneAccount = buildBodyParams();
            return createNewAccountAsync(createOneAccount, _callback);
        }
    }

    /**
     * Create an account
     * 
     * @param createOneAccount  (required)
     * @return CreateNewAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewAccountRequestBuilder createNewAccount() throws IllegalArgumentException {
        return new CreateNewAccountRequestBuilder();
    }
    private okhttp3.Call getAccountByIdCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountByIdValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountById(Async)");
        }

        return getAccountByIdCall(accountId, _callback);

    }


    private ApiResponse<Object> getAccountByIdWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountByIdValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAccountByIdAsync(String accountId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountByIdValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAccountByIdRequestBuilder {
        private final String accountId;

        private GetAccountByIdRequestBuilder(String accountId) {
            this.accountId = accountId;
        }

        /**
         * Build call for getAccountById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAccountByIdCall(accountId, _callback);
        }


        /**
         * Execute getAccountById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getAccountByIdWithHttpInfo(accountId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAccountById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getAccountByIdWithHttpInfo(accountId);
        }

        /**
         * Execute getAccountById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getAccountByIdAsync(accountId, _callback);
        }
    }

    /**
     * Get an account
     * 
     * @param accountId Account Id (required)
     * @return GetAccountByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAccountByIdRequestBuilder getAccountById(String accountId) throws IllegalArgumentException {
        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new GetAccountByIdRequestBuilder(accountId);
    }
    private okhttp3.Call getAuthenticatedManagementUrlCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/authenticate"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthenticatedManagementUrlValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAuthenticatedManagementUrl(Async)");
        }

        return getAuthenticatedManagementUrlCall(accountId, _callback);

    }


    private ApiResponse<Object> getAuthenticatedManagementUrlWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAuthenticatedManagementUrlValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAuthenticatedManagementUrlAsync(String accountId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthenticatedManagementUrlValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAuthenticatedManagementUrlRequestBuilder {
        private final String accountId;

        private GetAuthenticatedManagementUrlRequestBuilder(String accountId) {
            this.accountId = accountId;
        }

        /**
         * Build call for getAuthenticatedManagementUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAuthenticatedManagementUrlCall(accountId, _callback);
        }


        /**
         * Execute getAuthenticatedManagementUrl request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getAuthenticatedManagementUrlWithHttpInfo(accountId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAuthenticatedManagementUrl request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getAuthenticatedManagementUrlWithHttpInfo(accountId);
        }

        /**
         * Execute getAuthenticatedManagementUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getAuthenticatedManagementUrlAsync(accountId, _callback);
        }
    }

    /**
     * Get authenticated account management URL
     * 
     * @param accountId Account Id (required)
     * @return GetAuthenticatedManagementUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetAuthenticatedManagementUrlRequestBuilder getAuthenticatedManagementUrl(String accountId) throws IllegalArgumentException {
        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new GetAuthenticatedManagementUrlRequestBuilder(accountId);
    }
    private okhttp3.Call getByParameterCall(String email, String custom, String global, String orderID, String orderReference, String subscriptionId, String products, String subscriptions, String refunds, Double limit, Double page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (custom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom", custom));
        }

        if (global != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("global", global));
        }

        if (orderID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderID", orderID));
        }

        if (orderReference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderReference", orderReference));
        }

        if (subscriptionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscriptionId", subscriptionId));
        }

        if (products != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("products", products));
        }

        if (subscriptions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscriptions", subscriptions));
        }

        if (refunds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refunds", refunds));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByParameterValidateBeforeCall(String email, String custom, String global, String orderID, String orderReference, String subscriptionId, String products, String subscriptions, String refunds, Double limit, Double page, final ApiCallback _callback) throws ApiException {
        return getByParameterCall(email, custom, global, orderID, orderReference, subscriptionId, products, subscriptions, refunds, limit, page, _callback);

    }


    private ApiResponse<Object> getByParameterWithHttpInfo(String email, String custom, String global, String orderID, String orderReference, String subscriptionId, String products, String subscriptions, String refunds, Double limit, Double page) throws ApiException {
        okhttp3.Call localVarCall = getByParameterValidateBeforeCall(email, custom, global, orderID, orderReference, subscriptionId, products, subscriptions, refunds, limit, page, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByParameterAsync(String email, String custom, String global, String orderID, String orderReference, String subscriptionId, String products, String subscriptions, String refunds, Double limit, Double page, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByParameterValidateBeforeCall(email, custom, global, orderID, orderReference, subscriptionId, products, subscriptions, refunds, limit, page, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByParameterRequestBuilder {
        private String email;
        private String custom;
        private String global;
        private String orderID;
        private String orderReference;
        private String subscriptionId;
        private String products;
        private String subscriptions;
        private String refunds;
        private Double limit;
        private Double page;

        private GetByParameterRequestBuilder() {
        }

        /**
         * Set email
         * @param email Account email (optional)
         * @return GetByParameterRequestBuilder
         */
        public GetByParameterRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set custom
         * @param custom Account custom key (optional)
         * @return GetByParameterRequestBuilder
         */
        public GetByParameterRequestBuilder custom(String custom) {
            this.custom = custom;
            return this;
        }
        
        /**
         * Set global
         * @param global Account global key (optional)
         * @return GetByParameterRequestBuilder
         */
        public GetByParameterRequestBuilder global(String global) {
            this.global = global;
            return this;
        }
        
        /**
         * Set orderID
         * @param orderID Order id (optional)
         * @return GetByParameterRequestBuilder
         */
        public GetByParameterRequestBuilder orderID(String orderID) {
            this.orderID = orderID;
            return this;
        }
        
        /**
         * Set orderReference
         * @param orderReference Order Reference (optional)
         * @return GetByParameterRequestBuilder
         */
        public GetByParameterRequestBuilder orderReference(String orderReference) {
            this.orderReference = orderReference;
            return this;
        }
        
        /**
         * Set subscriptionId
         * @param subscriptionId Subscription ID (optional)
         * @return GetByParameterRequestBuilder
         */
        public GetByParameterRequestBuilder subscriptionId(String subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }
        
        /**
         * Set products
         * @param products Product ID (optional)
         * @return GetByParameterRequestBuilder
         */
        public GetByParameterRequestBuilder products(String products) {
            this.products = products;
            return this;
        }
        
        /**
         * Set subscriptions
         * @param subscriptions \&quot;active\&quot;, \&quot;ended\&quot;, \&quot;canceled\&quot;, \&quot;started\&quot; will return accounts with subscriptions in the corresponding state (optional)
         * @return GetByParameterRequestBuilder
         */
        public GetByParameterRequestBuilder subscriptions(String subscriptions) {
            this.subscriptions = subscriptions;
            return this;
        }
        
        /**
         * Set refunds
         * @param refunds true (optional)
         * @return GetByParameterRequestBuilder
         */
        public GetByParameterRequestBuilder refunds(String refunds) {
            this.refunds = refunds;
            return this;
        }
        
        /**
         * Set limit
         * @param limit integer value indicating the maximum number of records to be returned Or, when used together with page, the maximum number of records to be returned per page (optional)
         * @return GetByParameterRequestBuilder
         */
        public GetByParameterRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set page
         * @param page Integer value that must be used in conjunction with limit to specify which page of results should be returned (optional)
         * @return GetByParameterRequestBuilder
         */
        public GetByParameterRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for getByParameter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByParameterCall(email, custom, global, orderID, orderReference, subscriptionId, products, subscriptions, refunds, limit, page, _callback);
        }


        /**
         * Execute getByParameter request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getByParameterWithHttpInfo(email, custom, global, orderID, orderReference, subscriptionId, products, subscriptions, refunds, limit, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByParameter request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getByParameterWithHttpInfo(email, custom, global, orderID, orderReference, subscriptionId, products, subscriptions, refunds, limit, page);
        }

        /**
         * Execute getByParameter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getByParameterAsync(email, custom, global, orderID, orderReference, subscriptionId, products, subscriptions, refunds, limit, page, _callback);
        }
    }

    /**
     * Get all accounts or Search for accounts by parameter
     * If no parameters are sent, the operation will return a list of accountIDs.
     * @return GetByParameterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetByParameterRequestBuilder getByParameter() throws IllegalArgumentException {
        return new GetByParameterRequestBuilder();
    }
    private okhttp3.Call updateAccountByIdCall(String accountId, CreateOneAccount createOneAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createOneAccount;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountByIdValidateBeforeCall(String accountId, CreateOneAccount createOneAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateAccountById(Async)");
        }

        // verify the required parameter 'createOneAccount' is set
        if (createOneAccount == null) {
            throw new ApiException("Missing the required parameter 'createOneAccount' when calling updateAccountById(Async)");
        }

        return updateAccountByIdCall(accountId, createOneAccount, _callback);

    }


    private ApiResponse<Object> updateAccountByIdWithHttpInfo(String accountId, CreateOneAccount createOneAccount) throws ApiException {
        okhttp3.Call localVarCall = updateAccountByIdValidateBeforeCall(accountId, createOneAccount, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAccountByIdAsync(String accountId, CreateOneAccount createOneAccount, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountByIdValidateBeforeCall(accountId, createOneAccount, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAccountByIdRequestBuilder {
        private final String accountId;
        private ContactRequest contact;

        private UpdateAccountByIdRequestBuilder(String accountId) {
            this.accountId = accountId;
        }

        /**
         * Set contact
         * @param contact  (optional)
         * @return UpdateAccountByIdRequestBuilder
         */
        public UpdateAccountByIdRequestBuilder contact(ContactRequest contact) {
            this.contact = contact;
            return this;
        }
        
        /**
         * Build call for updateAccountById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateOneAccount createOneAccount = buildBodyParams();
            return updateAccountByIdCall(accountId, createOneAccount, _callback);
        }

        private CreateOneAccount buildBodyParams() {
            CreateOneAccount createOneAccount = new CreateOneAccount();
            createOneAccount.contact(this.contact);
            return createOneAccount;
        }

        /**
         * Execute updateAccountById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateOneAccount createOneAccount = buildBodyParams();
            ApiResponse<Object> localVarResp = updateAccountByIdWithHttpInfo(accountId, createOneAccount);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAccountById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateOneAccount createOneAccount = buildBodyParams();
            return updateAccountByIdWithHttpInfo(accountId, createOneAccount);
        }

        /**
         * Execute updateAccountById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateOneAccount createOneAccount = buildBodyParams();
            return updateAccountByIdAsync(accountId, createOneAccount, _callback);
        }
    }

    /**
     * Update account
     * 
     * @param accountId Account Id (required)
     * @param createOneAccount  (required)
     * @return UpdateAccountByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAccountByIdRequestBuilder updateAccountById(String accountId) throws IllegalArgumentException {
        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new UpdateAccountByIdRequestBuilder(accountId);
    }
}
