/*
 * FastSpring API
 * The FastSpring API and its supported requests, data, endpoints, and rate limits.  The FastSpring API is a backend service you can use to communicate with your FastSpring Store programmatically. It requires basic understanding of HTTP communication methods. The primary API communication methods include: - **GET** - request data from your store - **POST** - send data to your store, such as creating a new product record - **DELETE** - remove data from your store  The structure of the JSON data sent and received using the API is very similar to Webhooks. However, using the FastSpring API, you initiate all communication with your FastSpring Store.  If you prefer a client-side method of communicating with your FastSpring Store and generating dynamic webpage content, check out the [Store Builder Library](https://fastspring.com/docs/get-started-with-store-builder-library/).  ## Access the API  #### API Credentials and Authentication  FastSpring API credentials consist of a single username and password for your entire Store. The username and password are used for [Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) when making requests to the API.  #### Obtain Your API Credentials  1. Log on to the FastSpring App and navigate to [Integrations](https://fastspring.com/docs/integrations) > **API Credentials**. Initially, the only option on this page is the **Create** command.  2. Click **Create** to generate your API **Username** and **Password**. The page automatically refreshes, and then your credentials are displayed.  3. Make a note of the credentials and store them securely.  The API credentials allow complete access and control over your FastSpring Store. You will not be able to view the password in the FastSpring App after this session. If you forget your API credentials, you can reset them, however any of your stored procedures that rely on API access must be updated immediately with the new credentials. Otherwise, the API requests will fail.  ## API Requests  **Make all requests to https://api.fastspring.com**  When you make your requests, consider the following: - Ensure that the HTTP methods for all calls use uppercase letters (“GET,” “POST,” “DELETE”) Lowercase letters may result in a 404 error response. - FastSpring requires TLS 1.2 (or later) encryption for all calls to the FastSpring API.  - The API requires a **User-Agent** header in all requests. If your request does not include it, you may receive an 401 error message when attempting to make API requests. - The API uses basic authentication and does not support URL-encoded authentication. Use **Base64** to encode your username and password in the header. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AddressResponse;
import com.konfigthis.client.model.ContactResponse;
import com.konfigthis.client.model.ItemResponse;
import com.konfigthis.client.model.Link;
import com.konfigthis.client.model.StatusHistoryResponse;
import com.konfigthis.client.model.TagResponse;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * QuoteResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class QuoteResponse {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<TagResponse> tags = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_BUYER_GENERATED = "buyerGenerated";
  @SerializedName(SERIALIZED_NAME_BUYER_GENERATED)
  private Boolean buyerGenerated;

  public static final String SERIALIZED_NAME_COUPON = "coupon";
  @SerializedName(SERIALIZED_NAME_COUPON)
  private String coupon;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private ContactResponse createdBy;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DISCOUNT = "discount";
  @SerializedName(SERIALIZED_NAME_DISCOUNT)
  private Double discount;

  public static final String SERIALIZED_NAME_DISCOUNT_DISPLAY = "discountDisplay";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_DISPLAY)
  private String discountDisplay;

  public static final String SERIALIZED_NAME_DISCOUNT_IN_PAYOUT_CURRENCY = "discountInPayoutCurrency";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_IN_PAYOUT_CURRENCY)
  private Double discountInPayoutCurrency;

  public static final String SERIALIZED_NAME_DISCOUNT_IN_PAYOUT_CURRENCY_DISPLAY = "discountInPayoutCurrencyDisplay";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_IN_PAYOUT_CURRENCY_DISPLAY)
  private String discountInPayoutCurrencyDisplay;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private OffsetDateTime expires;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE_DAYS = "expirationDateDays";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE_DAYS)
  private Integer expirationDateDays;

  /**
   * Gets or Sets fulfillmentTerm
   */
  @JsonAdapter(FulfillmentTermEnum.Adapter.class)
 public enum FulfillmentTermEnum {
    PAYMENT("ON_PAYMENT"),
    
    QUOTE_ACCEPTANCE("ON_QUOTE_ACCEPTANCE");

    private String value;

    FulfillmentTermEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FulfillmentTermEnum fromValue(String value) {
      for (FulfillmentTermEnum b : FulfillmentTermEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FulfillmentTermEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FulfillmentTermEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FulfillmentTermEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FulfillmentTermEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FULFILLMENT_TERM = "fulfillmentTerm";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_TERM)
  private FulfillmentTermEnum fulfillmentTerm;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<ItemResponse> items = null;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_NET_TERMS_DAYS = "netTermsDays";
  @SerializedName(SERIALIZED_NAME_NET_TERMS_DAYS)
  private Integer netTermsDays;

  public static final String SERIALIZED_NAME_QUOTE_URL = "quoteUrl";
  @SerializedName(SERIALIZED_NAME_QUOTE_URL)
  private String quoteUrl;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private ContactResponse recipient;

  public static final String SERIALIZED_NAME_RECIPIENT_ADDRESS = "recipientAddress";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ADDRESS)
  private AddressResponse recipientAddress;

  public static final String SERIALIZED_NAME_SITE_ID = "siteId";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private String siteId;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    OPEN("OPEN"),
    
    CANCELED("CANCELED"),
    
    AWAITING_PAYMENT("AWAITING_PAYMENT"),
    
    COMPLETED("COMPLETED"),
    
    EXPIRED("EXPIRED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STATUS_HISTORY = "statusHistory";
  @SerializedName(SERIALIZED_NAME_STATUS_HISTORY)
  private Set<StatusHistoryResponse> statusHistory = null;

  public static final String SERIALIZED_NAME_SUBTOTAL = "subtotal";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL)
  private Double subtotal;

  public static final String SERIALIZED_NAME_SUBTOTAL_DISPLAY = "subtotalDisplay";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL_DISPLAY)
  private String subtotalDisplay;

  public static final String SERIALIZED_NAME_SUBTOTAL_IN_PAYOUT_CURRENCY = "subtotalInPayoutCurrency";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL_IN_PAYOUT_CURRENCY)
  private Double subtotalInPayoutCurrency;

  public static final String SERIALIZED_NAME_SUBTOTAL_IN_PAYOUT_CURRENCY_DISPLAY = "subtotalInPayoutCurrencyDisplay";
  @SerializedName(SERIALIZED_NAME_SUBTOTAL_IN_PAYOUT_CURRENCY_DISPLAY)
  private String subtotalInPayoutCurrencyDisplay;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Double tax;

  public static final String SERIALIZED_NAME_TAX_TYPE = "taxType";
  @SerializedName(SERIALIZED_NAME_TAX_TYPE)
  private String taxType;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_TOTAL_DISPLAY = "totalDisplay";
  @SerializedName(SERIALIZED_NAME_TOTAL_DISPLAY)
  private String totalDisplay;

  public static final String SERIALIZED_NAME_TOTAL_IN_PAYOUT_CURRENCY = "totalInPayoutCurrency";
  @SerializedName(SERIALIZED_NAME_TOTAL_IN_PAYOUT_CURRENCY)
  private Double totalInPayoutCurrency;

  public static final String SERIALIZED_NAME_TOTAL_IN_PAYOUT_CURRENCY_DISPLAY = "totalInPayoutCurrencyDisplay";
  @SerializedName(SERIALIZED_NAME_TOTAL_IN_PAYOUT_CURRENCY_DISPLAY)
  private String totalInPayoutCurrencyDisplay;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private String taxId;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SOURCE_I_P = "sourceIP";
  @SerializedName(SERIALIZED_NAME_SOURCE_I_P)
  private String sourceIP;

  public static final String SERIALIZED_NAME_IS_GROSS_TAX = "isGrossTax";
  @SerializedName(SERIALIZED_NAME_IS_GROSS_TAX)
  private Boolean isGrossTax;

  public static final String SERIALIZED_NAME_INVOICE_ID = "invoiceId";
  @SerializedName(SERIALIZED_NAME_INVOICE_ID)
  private String invoiceId;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Link> links = null;

  public QuoteResponse() {
  }

  public QuoteResponse tags(List<TagResponse> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public QuoteResponse addTagsItem(TagResponse tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TagResponse> getTags() {
    return tags;
  }


  public void setTags(List<TagResponse> tags) {
    
    
    
    this.tags = tags;
  }


  public QuoteResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The quote id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "QUVJIVYZTQDFBOBEO7IGNXER3VBQ", value = "The quote id")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public QuoteResponse buyerGenerated(Boolean buyerGenerated) {
    
    
    
    
    this.buyerGenerated = buyerGenerated;
    return this;
  }

   /**
   * Get buyerGenerated
   * @return buyerGenerated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getBuyerGenerated() {
    return buyerGenerated;
  }


  public void setBuyerGenerated(Boolean buyerGenerated) {
    
    
    
    this.buyerGenerated = buyerGenerated;
  }


  public QuoteResponse coupon(String coupon) {
    
    
    
    
    this.coupon = coupon;
    return this;
  }

   /**
   * Get coupon
   * @return coupon
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TENOFF", value = "")

  public String getCoupon() {
    return coupon;
  }


  public void setCoupon(String coupon) {
    
    
    
    this.coupon = coupon;
  }


  public QuoteResponse created(OffsetDateTime created) {
    
    
    
    
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-03-02T19:48:56.395Z", value = "")

  public OffsetDateTime getCreated() {
    return created;
  }


  public void setCreated(OffsetDateTime created) {
    
    
    
    this.created = created;
  }


  public QuoteResponse createdBy(ContactResponse createdBy) {
    
    
    
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContactResponse getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(ContactResponse createdBy) {
    
    
    
    this.createdBy = createdBy;
  }


  public QuoteResponse currency(String currency) {
    
    
    
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USD", value = "")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    
    
    
    this.currency = currency;
  }


  public QuoteResponse discount(Double discount) {
    
    
    
    
    this.discount = discount;
    return this;
  }

  public QuoteResponse discount(Integer discount) {
    
    
    
    
    this.discount = discount.doubleValue();
    return this;
  }

   /**
   * Get discount
   * @return discount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getDiscount() {
    return discount;
  }


  public void setDiscount(Double discount) {
    
    
    
    this.discount = discount;
  }


  public QuoteResponse discountDisplay(String discountDisplay) {
    
    
    
    
    this.discountDisplay = discountDisplay;
    return this;
  }

   /**
   * Get discountDisplay
   * @return discountDisplay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDiscountDisplay() {
    return discountDisplay;
  }


  public void setDiscountDisplay(String discountDisplay) {
    
    
    
    this.discountDisplay = discountDisplay;
  }


  public QuoteResponse discountInPayoutCurrency(Double discountInPayoutCurrency) {
    
    
    
    
    this.discountInPayoutCurrency = discountInPayoutCurrency;
    return this;
  }

  public QuoteResponse discountInPayoutCurrency(Integer discountInPayoutCurrency) {
    
    
    
    
    this.discountInPayoutCurrency = discountInPayoutCurrency.doubleValue();
    return this;
  }

   /**
   * Get discountInPayoutCurrency
   * @return discountInPayoutCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getDiscountInPayoutCurrency() {
    return discountInPayoutCurrency;
  }


  public void setDiscountInPayoutCurrency(Double discountInPayoutCurrency) {
    
    
    
    this.discountInPayoutCurrency = discountInPayoutCurrency;
  }


  public QuoteResponse discountInPayoutCurrencyDisplay(String discountInPayoutCurrencyDisplay) {
    
    
    
    
    this.discountInPayoutCurrencyDisplay = discountInPayoutCurrencyDisplay;
    return this;
  }

   /**
   * Get discountInPayoutCurrencyDisplay
   * @return discountInPayoutCurrencyDisplay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDiscountInPayoutCurrencyDisplay() {
    return discountInPayoutCurrencyDisplay;
  }


  public void setDiscountInPayoutCurrencyDisplay(String discountInPayoutCurrencyDisplay) {
    
    
    
    this.discountInPayoutCurrencyDisplay = discountInPayoutCurrencyDisplay;
  }


  public QuoteResponse expires(OffsetDateTime expires) {
    
    
    
    
    this.expires = expires;
    return this;
  }

   /**
   * Get expires
   * @return expires
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-04-01T19:48:56.395Z", value = "")

  public OffsetDateTime getExpires() {
    return expires;
  }


  public void setExpires(OffsetDateTime expires) {
    
    
    
    this.expires = expires;
  }


  public QuoteResponse expirationDateDays(Integer expirationDateDays) {
    
    
    
    
    this.expirationDateDays = expirationDateDays;
    return this;
  }

   /**
   * Get expirationDateDays
   * @return expirationDateDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "30", value = "")

  public Integer getExpirationDateDays() {
    return expirationDateDays;
  }


  public void setExpirationDateDays(Integer expirationDateDays) {
    
    
    
    this.expirationDateDays = expirationDateDays;
  }


  public QuoteResponse fulfillmentTerm(FulfillmentTermEnum fulfillmentTerm) {
    
    
    
    
    this.fulfillmentTerm = fulfillmentTerm;
    return this;
  }

   /**
   * Get fulfillmentTerm
   * @return fulfillmentTerm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ON_QUOTE_ACCEPTANCE", value = "")

  public FulfillmentTermEnum getFulfillmentTerm() {
    return fulfillmentTerm;
  }


  public void setFulfillmentTerm(FulfillmentTermEnum fulfillmentTerm) {
    
    
    
    this.fulfillmentTerm = fulfillmentTerm;
  }


  public QuoteResponse items(List<ItemResponse> items) {
    
    
    
    
    this.items = items;
    return this;
  }

  public QuoteResponse addItemsItem(ItemResponse itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ItemResponse> getItems() {
    return items;
  }


  public void setItems(List<ItemResponse> items) {
    
    
    
    this.items = items;
  }


  public QuoteResponse name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Quote for ABC Company", value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public QuoteResponse notes(String notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

   /**
   * Get notes
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "This is a Note", value = "")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    
    
    
    this.notes = notes;
  }


  public QuoteResponse netTermsDays(Integer netTermsDays) {
    
    
    
    
    this.netTermsDays = netTermsDays;
    return this;
  }

   /**
   * Get netTermsDays
   * @return netTermsDays
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "30", value = "")

  public Integer getNetTermsDays() {
    return netTermsDays;
  }


  public void setNetTermsDays(Integer netTermsDays) {
    
    
    
    this.netTermsDays = netTermsDays;
  }


  public QuoteResponse quoteUrl(String quoteUrl) {
    
    
    
    
    this.quoteUrl = quoteUrl;
    return this;
  }

   /**
   * Get quoteUrl
   * @return quoteUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://josemunoz.test.qa2.onfastspring.com/popup-defaultB2B/account/order/quote/QUVJIVYZTQDFBOBEO7IGNXER3VBQ", value = "")

  public String getQuoteUrl() {
    return quoteUrl;
  }


  public void setQuoteUrl(String quoteUrl) {
    
    
    
    this.quoteUrl = quoteUrl;
  }


  public QuoteResponse recipient(ContactResponse recipient) {
    
    
    
    
    this.recipient = recipient;
    return this;
  }

   /**
   * Get recipient
   * @return recipient
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContactResponse getRecipient() {
    return recipient;
  }


  public void setRecipient(ContactResponse recipient) {
    
    
    
    this.recipient = recipient;
  }


  public QuoteResponse recipientAddress(AddressResponse recipientAddress) {
    
    
    
    
    this.recipientAddress = recipientAddress;
    return this;
  }

   /**
   * Get recipientAddress
   * @return recipientAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AddressResponse getRecipientAddress() {
    return recipientAddress;
  }


  public void setRecipientAddress(AddressResponse recipientAddress) {
    
    
    
    this.recipientAddress = recipientAddress;
  }


  public QuoteResponse siteId(String siteId) {
    
    
    
    
    this.siteId = siteId;
    return this;
  }

   /**
   * Get siteId
   * @return siteId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "pOBehkkfTGo", value = "")

  public String getSiteId() {
    return siteId;
  }


  public void setSiteId(String siteId) {
    
    
    
    this.siteId = siteId;
  }


  public QuoteResponse status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OPEN", value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public QuoteResponse statusHistory(Set<StatusHistoryResponse> statusHistory) {
    
    
    
    
    this.statusHistory = statusHistory;
    return this;
  }

  public QuoteResponse addStatusHistoryItem(StatusHistoryResponse statusHistoryItem) {
    if (this.statusHistory == null) {
      this.statusHistory = new LinkedHashSet<>();
    }
    this.statusHistory.add(statusHistoryItem);
    return this;
  }

   /**
   * Get statusHistory
   * @return statusHistory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Set<StatusHistoryResponse> getStatusHistory() {
    return statusHistory;
  }


  public void setStatusHistory(Set<StatusHistoryResponse> statusHistory) {
    
    
    
    this.statusHistory = statusHistory;
  }


  public QuoteResponse subtotal(Double subtotal) {
    
    
    
    
    this.subtotal = subtotal;
    return this;
  }

  public QuoteResponse subtotal(Integer subtotal) {
    
    
    
    
    this.subtotal = subtotal.doubleValue();
    return this;
  }

   /**
   * Get subtotal
   * @return subtotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getSubtotal() {
    return subtotal;
  }


  public void setSubtotal(Double subtotal) {
    
    
    
    this.subtotal = subtotal;
  }


  public QuoteResponse subtotalDisplay(String subtotalDisplay) {
    
    
    
    
    this.subtotalDisplay = subtotalDisplay;
    return this;
  }

   /**
   * Get subtotalDisplay
   * @return subtotalDisplay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSubtotalDisplay() {
    return subtotalDisplay;
  }


  public void setSubtotalDisplay(String subtotalDisplay) {
    
    
    
    this.subtotalDisplay = subtotalDisplay;
  }


  public QuoteResponse subtotalInPayoutCurrency(Double subtotalInPayoutCurrency) {
    
    
    
    
    this.subtotalInPayoutCurrency = subtotalInPayoutCurrency;
    return this;
  }

  public QuoteResponse subtotalInPayoutCurrency(Integer subtotalInPayoutCurrency) {
    
    
    
    
    this.subtotalInPayoutCurrency = subtotalInPayoutCurrency.doubleValue();
    return this;
  }

   /**
   * Get subtotalInPayoutCurrency
   * @return subtotalInPayoutCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getSubtotalInPayoutCurrency() {
    return subtotalInPayoutCurrency;
  }


  public void setSubtotalInPayoutCurrency(Double subtotalInPayoutCurrency) {
    
    
    
    this.subtotalInPayoutCurrency = subtotalInPayoutCurrency;
  }


  public QuoteResponse subtotalInPayoutCurrencyDisplay(String subtotalInPayoutCurrencyDisplay) {
    
    
    
    
    this.subtotalInPayoutCurrencyDisplay = subtotalInPayoutCurrencyDisplay;
    return this;
  }

   /**
   * Get subtotalInPayoutCurrencyDisplay
   * @return subtotalInPayoutCurrencyDisplay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSubtotalInPayoutCurrencyDisplay() {
    return subtotalInPayoutCurrencyDisplay;
  }


  public void setSubtotalInPayoutCurrencyDisplay(String subtotalInPayoutCurrencyDisplay) {
    
    
    
    this.subtotalInPayoutCurrencyDisplay = subtotalInPayoutCurrencyDisplay;
  }


  public QuoteResponse tax(Double tax) {
    
    
    
    
    this.tax = tax;
    return this;
  }

  public QuoteResponse tax(Integer tax) {
    
    
    
    
    this.tax = tax.doubleValue();
    return this;
  }

   /**
   * Get tax
   * @return tax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTax() {
    return tax;
  }


  public void setTax(Double tax) {
    
    
    
    this.tax = tax;
  }


  public QuoteResponse taxType(String taxType) {
    
    
    
    
    this.taxType = taxType;
    return this;
  }

   /**
   * Get taxType
   * @return taxType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTaxType() {
    return taxType;
  }


  public void setTaxType(String taxType) {
    
    
    
    this.taxType = taxType;
  }


  public QuoteResponse total(Double total) {
    
    
    
    
    this.total = total;
    return this;
  }

  public QuoteResponse total(Integer total) {
    
    
    
    
    this.total = total.doubleValue();
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotal() {
    return total;
  }


  public void setTotal(Double total) {
    
    
    
    this.total = total;
  }


  public QuoteResponse totalDisplay(String totalDisplay) {
    
    
    
    
    this.totalDisplay = totalDisplay;
    return this;
  }

   /**
   * Get totalDisplay
   * @return totalDisplay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTotalDisplay() {
    return totalDisplay;
  }


  public void setTotalDisplay(String totalDisplay) {
    
    
    
    this.totalDisplay = totalDisplay;
  }


  public QuoteResponse totalInPayoutCurrency(Double totalInPayoutCurrency) {
    
    
    
    
    this.totalInPayoutCurrency = totalInPayoutCurrency;
    return this;
  }

  public QuoteResponse totalInPayoutCurrency(Integer totalInPayoutCurrency) {
    
    
    
    
    this.totalInPayoutCurrency = totalInPayoutCurrency.doubleValue();
    return this;
  }

   /**
   * Get totalInPayoutCurrency
   * @return totalInPayoutCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotalInPayoutCurrency() {
    return totalInPayoutCurrency;
  }


  public void setTotalInPayoutCurrency(Double totalInPayoutCurrency) {
    
    
    
    this.totalInPayoutCurrency = totalInPayoutCurrency;
  }


  public QuoteResponse totalInPayoutCurrencyDisplay(String totalInPayoutCurrencyDisplay) {
    
    
    
    
    this.totalInPayoutCurrencyDisplay = totalInPayoutCurrencyDisplay;
    return this;
  }

   /**
   * Get totalInPayoutCurrencyDisplay
   * @return totalInPayoutCurrencyDisplay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTotalInPayoutCurrencyDisplay() {
    return totalInPayoutCurrencyDisplay;
  }


  public void setTotalInPayoutCurrencyDisplay(String totalInPayoutCurrencyDisplay) {
    
    
    
    this.totalInPayoutCurrencyDisplay = totalInPayoutCurrencyDisplay;
  }


  public QuoteResponse updated(OffsetDateTime updated) {
    
    
    
    
    this.updated = updated;
    return this;
  }

   /**
   * Get updated
   * @return updated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-03-02T19:48:56.395Z", value = "")

  public OffsetDateTime getUpdated() {
    return updated;
  }


  public void setUpdated(OffsetDateTime updated) {
    
    
    
    this.updated = updated;
  }


  public QuoteResponse taxId(String taxId) {
    
    
    
    
    this.taxId = taxId;
    return this;
  }

   /**
   * Get taxId
   * @return taxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "BE09999999XX", value = "")

  public String getTaxId() {
    return taxId;
  }


  public void setTaxId(String taxId) {
    
    
    
    this.taxId = taxId;
  }


  public QuoteResponse source(String source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MANAGER", value = "")

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    
    
    
    this.source = source;
  }


  public QuoteResponse sourceIP(String sourceIP) {
    
    
    
    
    this.sourceIP = sourceIP;
    return this;
  }

   /**
   * Get sourceIP
   * @return sourceIP
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "181.55.25.101", value = "")

  public String getSourceIP() {
    return sourceIP;
  }


  public void setSourceIP(String sourceIP) {
    
    
    
    this.sourceIP = sourceIP;
  }


  public QuoteResponse isGrossTax(Boolean isGrossTax) {
    
    
    
    
    this.isGrossTax = isGrossTax;
    return this;
  }

   /**
   * Get isGrossTax
   * @return isGrossTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getIsGrossTax() {
    return isGrossTax;
  }


  public void setIsGrossTax(Boolean isGrossTax) {
    
    
    
    this.isGrossTax = isGrossTax;
  }


  public QuoteResponse invoiceId(String invoiceId) {
    
    
    
    
    this.invoiceId = invoiceId;
    return this;
  }

   /**
   * Get invoiceId
   * @return invoiceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInvoiceId() {
    return invoiceId;
  }


  public void setInvoiceId(String invoiceId) {
    
    
    
    this.invoiceId = invoiceId;
  }


  public QuoteResponse links(List<Link> links) {
    
    
    
    
    this.links = links;
    return this;
  }

  public QuoteResponse addLinksItem(Link linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Link> getLinks() {
    return links;
  }


  public void setLinks(List<Link> links) {
    
    
    
    this.links = links;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the QuoteResponse instance itself
   */
  public QuoteResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuoteResponse quoteResponse = (QuoteResponse) o;
    return Objects.equals(this.tags, quoteResponse.tags) &&
        Objects.equals(this.id, quoteResponse.id) &&
        Objects.equals(this.buyerGenerated, quoteResponse.buyerGenerated) &&
        Objects.equals(this.coupon, quoteResponse.coupon) &&
        Objects.equals(this.created, quoteResponse.created) &&
        Objects.equals(this.createdBy, quoteResponse.createdBy) &&
        Objects.equals(this.currency, quoteResponse.currency) &&
        Objects.equals(this.discount, quoteResponse.discount) &&
        Objects.equals(this.discountDisplay, quoteResponse.discountDisplay) &&
        Objects.equals(this.discountInPayoutCurrency, quoteResponse.discountInPayoutCurrency) &&
        Objects.equals(this.discountInPayoutCurrencyDisplay, quoteResponse.discountInPayoutCurrencyDisplay) &&
        Objects.equals(this.expires, quoteResponse.expires) &&
        Objects.equals(this.expirationDateDays, quoteResponse.expirationDateDays) &&
        Objects.equals(this.fulfillmentTerm, quoteResponse.fulfillmentTerm) &&
        Objects.equals(this.items, quoteResponse.items) &&
        Objects.equals(this.name, quoteResponse.name) &&
        Objects.equals(this.notes, quoteResponse.notes) &&
        Objects.equals(this.netTermsDays, quoteResponse.netTermsDays) &&
        Objects.equals(this.quoteUrl, quoteResponse.quoteUrl) &&
        Objects.equals(this.recipient, quoteResponse.recipient) &&
        Objects.equals(this.recipientAddress, quoteResponse.recipientAddress) &&
        Objects.equals(this.siteId, quoteResponse.siteId) &&
        Objects.equals(this.status, quoteResponse.status) &&
        Objects.equals(this.statusHistory, quoteResponse.statusHistory) &&
        Objects.equals(this.subtotal, quoteResponse.subtotal) &&
        Objects.equals(this.subtotalDisplay, quoteResponse.subtotalDisplay) &&
        Objects.equals(this.subtotalInPayoutCurrency, quoteResponse.subtotalInPayoutCurrency) &&
        Objects.equals(this.subtotalInPayoutCurrencyDisplay, quoteResponse.subtotalInPayoutCurrencyDisplay) &&
        Objects.equals(this.tax, quoteResponse.tax) &&
        Objects.equals(this.taxType, quoteResponse.taxType) &&
        Objects.equals(this.total, quoteResponse.total) &&
        Objects.equals(this.totalDisplay, quoteResponse.totalDisplay) &&
        Objects.equals(this.totalInPayoutCurrency, quoteResponse.totalInPayoutCurrency) &&
        Objects.equals(this.totalInPayoutCurrencyDisplay, quoteResponse.totalInPayoutCurrencyDisplay) &&
        Objects.equals(this.updated, quoteResponse.updated) &&
        Objects.equals(this.taxId, quoteResponse.taxId) &&
        Objects.equals(this.source, quoteResponse.source) &&
        Objects.equals(this.sourceIP, quoteResponse.sourceIP) &&
        Objects.equals(this.isGrossTax, quoteResponse.isGrossTax) &&
        Objects.equals(this.invoiceId, quoteResponse.invoiceId) &&
        Objects.equals(this.links, quoteResponse.links)&&
        Objects.equals(this.additionalProperties, quoteResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, id, buyerGenerated, coupon, created, createdBy, currency, discount, discountDisplay, discountInPayoutCurrency, discountInPayoutCurrencyDisplay, expires, expirationDateDays, fulfillmentTerm, items, name, notes, netTermsDays, quoteUrl, recipient, recipientAddress, siteId, status, statusHistory, subtotal, subtotalDisplay, subtotalInPayoutCurrency, subtotalInPayoutCurrencyDisplay, tax, taxType, total, totalDisplay, totalInPayoutCurrency, totalInPayoutCurrencyDisplay, updated, taxId, source, sourceIP, isGrossTax, invoiceId, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuoteResponse {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    buyerGenerated: ").append(toIndentedString(buyerGenerated)).append("\n");
    sb.append("    coupon: ").append(toIndentedString(coupon)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    discount: ").append(toIndentedString(discount)).append("\n");
    sb.append("    discountDisplay: ").append(toIndentedString(discountDisplay)).append("\n");
    sb.append("    discountInPayoutCurrency: ").append(toIndentedString(discountInPayoutCurrency)).append("\n");
    sb.append("    discountInPayoutCurrencyDisplay: ").append(toIndentedString(discountInPayoutCurrencyDisplay)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    expirationDateDays: ").append(toIndentedString(expirationDateDays)).append("\n");
    sb.append("    fulfillmentTerm: ").append(toIndentedString(fulfillmentTerm)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    netTermsDays: ").append(toIndentedString(netTermsDays)).append("\n");
    sb.append("    quoteUrl: ").append(toIndentedString(quoteUrl)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    recipientAddress: ").append(toIndentedString(recipientAddress)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusHistory: ").append(toIndentedString(statusHistory)).append("\n");
    sb.append("    subtotal: ").append(toIndentedString(subtotal)).append("\n");
    sb.append("    subtotalDisplay: ").append(toIndentedString(subtotalDisplay)).append("\n");
    sb.append("    subtotalInPayoutCurrency: ").append(toIndentedString(subtotalInPayoutCurrency)).append("\n");
    sb.append("    subtotalInPayoutCurrencyDisplay: ").append(toIndentedString(subtotalInPayoutCurrencyDisplay)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    taxType: ").append(toIndentedString(taxType)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    totalDisplay: ").append(toIndentedString(totalDisplay)).append("\n");
    sb.append("    totalInPayoutCurrency: ").append(toIndentedString(totalInPayoutCurrency)).append("\n");
    sb.append("    totalInPayoutCurrencyDisplay: ").append(toIndentedString(totalInPayoutCurrencyDisplay)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceIP: ").append(toIndentedString(sourceIP)).append("\n");
    sb.append("    isGrossTax: ").append(toIndentedString(isGrossTax)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("id");
    openapiFields.add("buyerGenerated");
    openapiFields.add("coupon");
    openapiFields.add("created");
    openapiFields.add("createdBy");
    openapiFields.add("currency");
    openapiFields.add("discount");
    openapiFields.add("discountDisplay");
    openapiFields.add("discountInPayoutCurrency");
    openapiFields.add("discountInPayoutCurrencyDisplay");
    openapiFields.add("expires");
    openapiFields.add("expirationDateDays");
    openapiFields.add("fulfillmentTerm");
    openapiFields.add("items");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("netTermsDays");
    openapiFields.add("quoteUrl");
    openapiFields.add("recipient");
    openapiFields.add("recipientAddress");
    openapiFields.add("siteId");
    openapiFields.add("status");
    openapiFields.add("statusHistory");
    openapiFields.add("subtotal");
    openapiFields.add("subtotalDisplay");
    openapiFields.add("subtotalInPayoutCurrency");
    openapiFields.add("subtotalInPayoutCurrencyDisplay");
    openapiFields.add("tax");
    openapiFields.add("taxType");
    openapiFields.add("total");
    openapiFields.add("totalDisplay");
    openapiFields.add("totalInPayoutCurrency");
    openapiFields.add("totalInPayoutCurrencyDisplay");
    openapiFields.add("updated");
    openapiFields.add("taxId");
    openapiFields.add("source");
    openapiFields.add("sourceIP");
    openapiFields.add("isGrossTax");
    openapiFields.add("invoiceId");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to QuoteResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!QuoteResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuoteResponse is not found in the empty JSON string", QuoteResponse.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            TagResponse.validateJsonObject(jsonArraytags.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("coupon") != null && !jsonObj.get("coupon").isJsonNull()) && !jsonObj.get("coupon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coupon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coupon").toString()));
      }
      // validate the optional field `createdBy`
      if (jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) {
        ContactResponse.validateJsonObject(jsonObj.getAsJsonObject("createdBy"));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("discountDisplay") != null && !jsonObj.get("discountDisplay").isJsonNull()) && !jsonObj.get("discountDisplay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discountDisplay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discountDisplay").toString()));
      }
      if ((jsonObj.get("discountInPayoutCurrencyDisplay") != null && !jsonObj.get("discountInPayoutCurrencyDisplay").isJsonNull()) && !jsonObj.get("discountInPayoutCurrencyDisplay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discountInPayoutCurrencyDisplay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discountInPayoutCurrencyDisplay").toString()));
      }
      if ((jsonObj.get("fulfillmentTerm") != null && !jsonObj.get("fulfillmentTerm").isJsonNull()) && !jsonObj.get("fulfillmentTerm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fulfillmentTerm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fulfillmentTerm").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            ItemResponse.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("quoteUrl") != null && !jsonObj.get("quoteUrl").isJsonNull()) && !jsonObj.get("quoteUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quoteUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quoteUrl").toString()));
      }
      // validate the optional field `recipient`
      if (jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonNull()) {
        ContactResponse.validateJsonObject(jsonObj.getAsJsonObject("recipient"));
      }
      // validate the optional field `recipientAddress`
      if (jsonObj.get("recipientAddress") != null && !jsonObj.get("recipientAddress").isJsonNull()) {
        AddressResponse.validateJsonObject(jsonObj.getAsJsonObject("recipientAddress"));
      }
      if ((jsonObj.get("siteId") != null && !jsonObj.get("siteId").isJsonNull()) && !jsonObj.get("siteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `siteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("siteId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("statusHistory") != null && !jsonObj.get("statusHistory").isJsonNull()) {
        JsonArray jsonArraystatusHistory = jsonObj.getAsJsonArray("statusHistory");
        if (jsonArraystatusHistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statusHistory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statusHistory` to be an array in the JSON string but got `%s`", jsonObj.get("statusHistory").toString()));
          }

          // validate the optional field `statusHistory` (array)
          for (int i = 0; i < jsonArraystatusHistory.size(); i++) {
            StatusHistoryResponse.validateJsonObject(jsonArraystatusHistory.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("subtotalDisplay") != null && !jsonObj.get("subtotalDisplay").isJsonNull()) && !jsonObj.get("subtotalDisplay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtotalDisplay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtotalDisplay").toString()));
      }
      if ((jsonObj.get("subtotalInPayoutCurrencyDisplay") != null && !jsonObj.get("subtotalInPayoutCurrencyDisplay").isJsonNull()) && !jsonObj.get("subtotalInPayoutCurrencyDisplay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtotalInPayoutCurrencyDisplay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtotalInPayoutCurrencyDisplay").toString()));
      }
      if ((jsonObj.get("taxType") != null && !jsonObj.get("taxType").isJsonNull()) && !jsonObj.get("taxType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxType").toString()));
      }
      if ((jsonObj.get("totalDisplay") != null && !jsonObj.get("totalDisplay").isJsonNull()) && !jsonObj.get("totalDisplay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalDisplay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalDisplay").toString()));
      }
      if ((jsonObj.get("totalInPayoutCurrencyDisplay") != null && !jsonObj.get("totalInPayoutCurrencyDisplay").isJsonNull()) && !jsonObj.get("totalInPayoutCurrencyDisplay").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalInPayoutCurrencyDisplay` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalInPayoutCurrencyDisplay").toString()));
      }
      if ((jsonObj.get("taxId") != null && !jsonObj.get("taxId").isJsonNull()) && !jsonObj.get("taxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxId").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("sourceIP") != null && !jsonObj.get("sourceIP").isJsonNull()) && !jsonObj.get("sourceIP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceIP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceIP").toString()));
      }
      if ((jsonObj.get("invoiceId") != null && !jsonObj.get("invoiceId").isJsonNull()) && !jsonObj.get("invoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceId").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Link.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuoteResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuoteResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuoteResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuoteResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<QuoteResponse>() {
           @Override
           public void write(JsonWriter out, QuoteResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public QuoteResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             QuoteResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QuoteResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QuoteResponse
  * @throws IOException if the JSON string is invalid with respect to QuoteResponse
  */
  public static QuoteResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuoteResponse.class);
  }

 /**
  * Convert an instance of QuoteResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

