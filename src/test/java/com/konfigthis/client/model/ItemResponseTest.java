/*
 * FastSpring API
 * The FastSpring API and its supported requests, data, endpoints, and rate limits.  The FastSpring API is a backend service you can use to communicate with your FastSpring Store programmatically. It requires basic understanding of HTTP communication methods. The primary API communication methods include: - **GET** - request data from your store - **POST** - send data to your store, such as creating a new product record - **DELETE** - remove data from your store  The structure of the JSON data sent and received using the API is very similar to Webhooks. However, using the FastSpring API, you initiate all communication with your FastSpring Store.  If you prefer a client-side method of communicating with your FastSpring Store and generating dynamic webpage content, check out the [Store Builder Library](https://fastspring.com/docs/get-started-with-store-builder-library/).  ## Access the API  #### API Credentials and Authentication  FastSpring API credentials consist of a single username and password for your entire Store. The username and password are used for [Basic Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) when making requests to the API.  #### Obtain Your API Credentials  1. Log on to the FastSpring App and navigate to [Integrations](https://fastspring.com/docs/integrations) > **API Credentials**. Initially, the only option on this page is the **Create** command.  2. Click **Create** to generate your API **Username** and **Password**. The page automatically refreshes, and then your credentials are displayed.  3. Make a note of the credentials and store them securely.  The API credentials allow complete access and control over your FastSpring Store. You will not be able to view the password in the FastSpring App after this session. If you forget your API credentials, you can reset them, however any of your stored procedures that rely on API access must be updated immediately with the new credentials. Otherwise, the API requests will fail.  ## API Requests  **Make all requests to https://api.fastspring.com**  When you make your requests, consider the following: - Ensure that the HTTP methods for all calls use uppercase letters (“GET,” “POST,” “DELETE”) Lowercase letters may result in a 404 error response. - FastSpring requires TLS 1.2 (or later) encryption for all calls to the FastSpring API.  - The API requires a **User-Agent** header in all requests. If your request does not include it, you may receive an 401 error message when attempting to make API requests. - The API uses basic authentication and does not support URL-encoded authentication. Use **Base64** to encode your username and password in the header. 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ItemRenewalResponse;
import com.konfigthis.client.model.ItemTaxResponse;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for ItemResponse
 */
public class ItemResponseTest {
    private final ItemResponse model = new ItemResponse();

    /**
     * Model tests for ItemResponse
     */
    @Test
    public void testItemResponse() {
        // TODO: test ItemResponse
    }

    /**
     * Test the property 'product'
     */
    @Test
    public void productTest() {
        // TODO: test product
    }

    /**
     * Test the property 'customPrice'
     */
    @Test
    public void customPriceTest() {
        // TODO: test customPrice
    }

    /**
     * Test the property 'display'
     */
    @Test
    public void displayTest() {
        // TODO: test display
    }

    /**
     * Test the property 'image'
     */
    @Test
    public void imageTest() {
        // TODO: test image
    }

    /**
     * Test the property 'intervalCount'
     */
    @Test
    public void intervalCountTest() {
        // TODO: test intervalCount
    }

    /**
     * Test the property 'period'
     */
    @Test
    public void periodTest() {
        // TODO: test period
    }

    /**
     * Test the property 'periodDays'
     */
    @Test
    public void periodDaysTest() {
        // TODO: test periodDays
    }

    /**
     * Test the property 'quantity'
     */
    @Test
    public void quantityTest() {
        // TODO: test quantity
    }

    /**
     * Test the property 'renewIntoProducts'
     */
    @Test
    public void renewIntoProductsTest() {
        // TODO: test renewIntoProducts
    }

    /**
     * Test the property 'taxes'
     */
    @Test
    public void taxesTest() {
        // TODO: test taxes
    }

    /**
     * Test the property 'trialDays'
     */
    @Test
    public void trialDaysTest() {
        // TODO: test trialDays
    }

    /**
     * Test the property 'subscription'
     */
    @Test
    public void subscriptionTest() {
        // TODO: test subscription
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'unitCouponDiscount'
     */
    @Test
    public void unitCouponDiscountTest() {
        // TODO: test unitCouponDiscount
    }

    /**
     * Test the property 'unitCouponDiscountDisplay'
     */
    @Test
    public void unitCouponDiscountDisplayTest() {
        // TODO: test unitCouponDiscountDisplay
    }

    /**
     * Test the property 'unitCouponDiscountInPayoutCurrency'
     */
    @Test
    public void unitCouponDiscountInPayoutCurrencyTest() {
        // TODO: test unitCouponDiscountInPayoutCurrency
    }

    /**
     * Test the property 'unitCouponDiscountInPayoutCurrencyDisplay'
     */
    @Test
    public void unitCouponDiscountInPayoutCurrencyDisplayTest() {
        // TODO: test unitCouponDiscountInPayoutCurrencyDisplay
    }

    /**
     * Test the property 'unitDiscount'
     */
    @Test
    public void unitDiscountTest() {
        // TODO: test unitDiscount
    }

    /**
     * Test the property 'unitDiscountDisplay'
     */
    @Test
    public void unitDiscountDisplayTest() {
        // TODO: test unitDiscountDisplay
    }

    /**
     * Test the property 'unitDiscountInPayoutCurrency'
     */
    @Test
    public void unitDiscountInPayoutCurrencyTest() {
        // TODO: test unitDiscountInPayoutCurrency
    }

    /**
     * Test the property 'unitDiscountInPayoutCurrencyDisplay'
     */
    @Test
    public void unitDiscountInPayoutCurrencyDisplayTest() {
        // TODO: test unitDiscountInPayoutCurrencyDisplay
    }

    /**
     * Test the property 'unitListPrice'
     */
    @Test
    public void unitListPriceTest() {
        // TODO: test unitListPrice
    }

    /**
     * Test the property 'unitListPriceDisplay'
     */
    @Test
    public void unitListPriceDisplayTest() {
        // TODO: test unitListPriceDisplay
    }

    /**
     * Test the property 'unitListPriceInPayoutCurrency'
     */
    @Test
    public void unitListPriceInPayoutCurrencyTest() {
        // TODO: test unitListPriceInPayoutCurrency
    }

    /**
     * Test the property 'unitListPriceInPayoutCurrencyDisplay'
     */
    @Test
    public void unitListPriceInPayoutCurrencyDisplayTest() {
        // TODO: test unitListPriceInPayoutCurrencyDisplay
    }

    /**
     * Test the property 'unitPrice'
     */
    @Test
    public void unitPriceTest() {
        // TODO: test unitPrice
    }

    /**
     * Test the property 'unitPriceDisplay'
     */
    @Test
    public void unitPriceDisplayTest() {
        // TODO: test unitPriceDisplay
    }

    /**
     * Test the property 'unitPriceInPayoutCurrency'
     */
    @Test
    public void unitPriceInPayoutCurrencyTest() {
        // TODO: test unitPriceInPayoutCurrency
    }

    /**
     * Test the property 'unitPriceInPayoutCurrencyDisplay'
     */
    @Test
    public void unitPriceInPayoutCurrencyDisplayTest() {
        // TODO: test unitPriceInPayoutCurrencyDisplay
    }

    /**
     * Test the property 'unitPriceWithoutTax'
     */
    @Test
    public void unitPriceWithoutTaxTest() {
        // TODO: test unitPriceWithoutTax
    }

    /**
     * Test the property 'unitPriceWithoutTaxDisplay'
     */
    @Test
    public void unitPriceWithoutTaxDisplayTest() {
        // TODO: test unitPriceWithoutTaxDisplay
    }

    /**
     * Test the property 'unitListPriceWithoutTax'
     */
    @Test
    public void unitListPriceWithoutTaxTest() {
        // TODO: test unitListPriceWithoutTax
    }

    /**
     * Test the property 'unitListPriceWithoutTaxDisplay'
     */
    @Test
    public void unitListPriceWithoutTaxDisplayTest() {
        // TODO: test unitListPriceWithoutTaxDisplay
    }

}
